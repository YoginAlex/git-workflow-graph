{"version":3,"sources":["node_modules/@gitgraph/js/lib/gitgraph.umd.js","../src/orientation.ts","../src/utils.ts","../src/template.ts","index.js"],"names":["graphContainer","document","getElementById","gitgraph","orientation","Orientation","VerticalReverse","template","TemplateName","Metro","commit","message","displayAuthor","displayBranch","displayHash","font","master","branch","tag","newEpic","newEpic2","task1","task2","merge","release","bug1","bug2","productionBug"],"mappings":"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","file":"git-graph.ef678bbc.js","sourceRoot":"..","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = global || self, factory(global.GitgraphJS = {}));\n}(this, function (exports) { 'use strict';\n\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tfunction unwrapExports (x) {\n\t\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n\t}\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar orientation = createCommonjsModule(function (module, exports) {\n\t// Extracted from `gitgraph.ts` because it caused `utils` tests to fail\n\t// because of circular dependency between `utils` and `template`.\n\t// It's not clear why (the circular dependency still exist) but `Orientation`\n\t// was the only one causing issue. Maybe because it's an enum?\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar Orientation;\n\t(function (Orientation) {\n\t    Orientation[\"VerticalReverse\"] = \"vertical-reverse\";\n\t    Orientation[\"Horizontal\"] = \"horizontal\";\n\t    Orientation[\"HorizontalReverse\"] = \"horizontal-reverse\";\n\t})(Orientation = exports.Orientation || (exports.Orientation = {}));\n\n\t});\n\n\tunwrapExports(orientation);\n\tvar orientation_1 = orientation.Orientation;\n\n\tvar utils = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\t/**\n\t * Provide a default value to a boolean.\n\t * @param value\n\t * @param defaultValue\n\t */\n\tfunction booleanOptionOr(value, defaultValue) {\n\t    return typeof value === \"boolean\" ? value : defaultValue;\n\t}\n\texports.booleanOptionOr = booleanOptionOr;\n\t/**\n\t * Provide a default value to a number.\n\t * @param value\n\t * @param defaultValue\n\t */\n\tfunction numberOptionOr(value, defaultValue) {\n\t    return typeof value === \"number\" ? value : defaultValue;\n\t}\n\texports.numberOptionOr = numberOptionOr;\n\t/**\n\t * Creates an object composed of the picked object properties.\n\t * @param obj The source object\n\t * @param paths The property paths to pick\n\t */\n\tfunction pick(obj, paths) {\n\t    return Object.assign({}, paths.reduce((mem, key) => (Object.assign({}, mem, { [key]: obj[key] })), {}));\n\t}\n\texports.pick = pick;\n\t/**\n\t * Print a light version of commits into the console.\n\t * @param commits List of commits\n\t * @param paths The property paths to pick\n\t */\n\tfunction debug(commits, paths) {\n\t    // tslint:disable-next-line:no-console\n\t    console.log(JSON.stringify(commits.map((commit) => pick(commit, paths)), null, 2));\n\t}\n\texports.debug = debug;\n\t/**\n\t * Return true if is undefined.\n\t *\n\t * @param obj\n\t */\n\tfunction isUndefined(obj) {\n\t    return obj === undefined;\n\t}\n\texports.isUndefined = isUndefined;\n\t/**\n\t * Return a version of the object without any undefined keys.\n\t *\n\t * @param obj\n\t */\n\tfunction withoutUndefinedKeys(obj = {}) {\n\t    return Object.keys(obj).reduce((mem, key) => isUndefined(obj[key]) ? mem : Object.assign({}, mem, { [key]: obj[key] }), {});\n\t}\n\texports.withoutUndefinedKeys = withoutUndefinedKeys;\n\t/**\n\t * Return a string ready to use in `svg.path.d` to draw an arrow from params.\n\t *\n\t * @param graph Graph context\n\t * @param parent Parent commit of the target commit\n\t * @param commit Target commit\n\t */\n\tfunction arrowSvgPath(graph, parent, commit) {\n\t    const commitRadius = commit.style.dot.size;\n\t    const size = graph.template.arrow.size;\n\t    const h = commitRadius + graph.template.arrow.offset;\n\t    // Delta between left & right (radian)\n\t    const delta = Math.PI / 7;\n\t    // Alpha angle between parent & commit (radian)\n\t    const alpha = getAlpha(graph, parent, commit);\n\t    // Top\n\t    const x1 = h * Math.cos(alpha);\n\t    const y1 = h * Math.sin(alpha);\n\t    // Bottom right\n\t    const x2 = (h + size) * Math.cos(alpha - delta);\n\t    const y2 = (h + size) * Math.sin(alpha - delta);\n\t    // Bottom center\n\t    const x3 = (h + size / 2) * Math.cos(alpha);\n\t    const y3 = (h + size / 2) * Math.sin(alpha);\n\t    // Bottom left\n\t    const x4 = (h + size) * Math.cos(alpha + delta);\n\t    const y4 = (h + size) * Math.sin(alpha + delta);\n\t    return `M${x1},${y1} L${x2},${y2} Q${x3},${y3} ${x4},${y4} L${x4},${y4}`;\n\t}\n\texports.arrowSvgPath = arrowSvgPath;\n\tfunction getAlpha(graph, parent, commit) {\n\t    const deltaX = parent.x - commit.x;\n\t    const deltaY = parent.y - commit.y;\n\t    const commitSpacing = graph.template.commit.spacing;\n\t    let alphaY;\n\t    let alphaX;\n\t    // Angle usually start from previous commit Y position:\n\t    //\n\t    // o\n\t    // ↑ ↖ ︎\n\t    // o  |  <-- path is straight until last commit Y position\n\t    // ↑  o\n\t    // | ↗︎\n\t    // o\n\t    //\n\t    // So we can to default to commit spacing.\n\t    // For horizontal orientation => same with commit X position.\n\t    switch (graph.orientation) {\n\t        case orientation.Orientation.Horizontal:\n\t            alphaY = deltaY;\n\t            alphaX = -commitSpacing;\n\t            break;\n\t        case orientation.Orientation.HorizontalReverse:\n\t            alphaY = deltaY;\n\t            alphaX = commitSpacing;\n\t            break;\n\t        case orientation.Orientation.VerticalReverse:\n\t            alphaY = -commitSpacing;\n\t            alphaX = deltaX;\n\t            break;\n\t        default:\n\t            alphaY = commitSpacing;\n\t            alphaX = deltaX;\n\t            break;\n\t    }\n\t    // If commit is distant from its parent, there should be no angle.\n\t    //\n\t    //    o ︎\n\t    //    ↑  <-- arrow is like previous commit was on same X position\n\t    // o  |\n\t    // | /\n\t    // o\n\t    //\n\t    // For horizontal orientation => same with commit Y position.\n\t    if (graph.isVertical) {\n\t        if (Math.abs(deltaY) > commitSpacing)\n\t            alphaX = 0;\n\t    }\n\t    else {\n\t        if (Math.abs(deltaX) > commitSpacing)\n\t            alphaY = 0;\n\t    }\n\t    if (graph.reverseArrow) {\n\t        alphaY *= -1;\n\t        alphaX *= -1;\n\t    }\n\t    return Math.atan2(alphaY, alphaX);\n\t}\n\n\t});\n\n\tunwrapExports(utils);\n\tvar utils_1 = utils.booleanOptionOr;\n\tvar utils_2 = utils.numberOptionOr;\n\tvar utils_3 = utils.pick;\n\tvar utils_4 = utils.debug;\n\tvar utils_5 = utils.isUndefined;\n\tvar utils_6 = utils.withoutUndefinedKeys;\n\tvar utils_7 = utils.arrowSvgPath;\n\n\tvar template = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\t/**\n\t * Branch merge style enum\n\t */\n\tvar MergeStyle;\n\t(function (MergeStyle) {\n\t    MergeStyle[\"Bezier\"] = \"bezier\";\n\t    MergeStyle[\"Straight\"] = \"straight\";\n\t})(MergeStyle || (MergeStyle = {}));\n\texports.MergeStyle = MergeStyle;\n\texports.DEFAULT_FONT = \"normal 12pt Calibri\";\n\t/**\n\t * Gitgraph template\n\t *\n\t * Set of design rules for the rendering.\n\t */\n\tclass Template {\n\t    constructor(options) {\n\t        // Options\n\t        options.branch = options.branch || {};\n\t        options.branch.label = options.branch.label || {};\n\t        options.arrow = options.arrow || {};\n\t        options.commit = options.commit || {};\n\t        options.commit.dot = options.commit.dot || {};\n\t        options.commit.message = options.commit.message || {};\n\t        // One color per column\n\t        this.colors = options.colors || [\"#000000\"];\n\t        // Branch style\n\t        this.branch = {\n\t            color: options.branch.color,\n\t            lineWidth: options.branch.lineWidth || 2,\n\t            mergeStyle: options.branch.mergeStyle || MergeStyle.Bezier,\n\t            spacing: utils.numberOptionOr(options.branch.spacing, 20),\n\t            label: {\n\t                display: utils.booleanOptionOr(options.branch.label.display, true),\n\t                color: options.branch.label.color || options.commit.color,\n\t                strokeColor: options.branch.label.strokeColor || options.commit.color,\n\t                bgColor: options.branch.label.bgColor || \"white\",\n\t                font: options.branch.label.font ||\n\t                    options.commit.message.font ||\n\t                    exports.DEFAULT_FONT,\n\t                borderRadius: utils.numberOptionOr(options.branch.label.borderRadius, 10),\n\t            },\n\t        };\n\t        // Arrow style\n\t        this.arrow = {\n\t            size: options.arrow.size || null,\n\t            color: options.arrow.color || null,\n\t            offset: options.arrow.offset || 2,\n\t        };\n\t        // Commit style\n\t        this.commit = {\n\t            color: options.commit.color,\n\t            spacing: utils.numberOptionOr(options.commit.spacing, 25),\n\t            hasTooltipInCompactMode: utils.booleanOptionOr(options.commit.hasTooltipInCompactMode, true),\n\t            dot: {\n\t                color: options.commit.dot.color || options.commit.color,\n\t                size: options.commit.dot.size || 3,\n\t                strokeWidth: utils.numberOptionOr(options.commit.dot.strokeWidth, 0),\n\t                strokeColor: options.commit.dot.strokeColor,\n\t                font: options.commit.dot.font ||\n\t                    options.commit.message.font ||\n\t                    \"normal 10pt Calibri\",\n\t            },\n\t            message: {\n\t                display: utils.booleanOptionOr(options.commit.message.display, true),\n\t                displayAuthor: utils.booleanOptionOr(options.commit.message.displayAuthor, true),\n\t                displayHash: utils.booleanOptionOr(options.commit.message.displayHash, true),\n\t                color: options.commit.message.color || options.commit.color,\n\t                font: options.commit.message.font || exports.DEFAULT_FONT,\n\t            },\n\t        };\n\t        // Tag style\n\t        // This one is computed in the Tag instance. It needs Commit style\n\t        // that is partially computed at runtime (for colors).\n\t        this.tag = options.tag || {};\n\t    }\n\t}\n\texports.Template = Template;\n\t/**\n\t * Black arrow template\n\t */\n\tconst blackArrowTemplate = new Template({\n\t    colors: [\"#6963FF\", \"#47E8D4\", \"#6BDB52\", \"#E84BA5\", \"#FFA657\"],\n\t    branch: {\n\t        color: \"#000000\",\n\t        lineWidth: 4,\n\t        spacing: 50,\n\t        mergeStyle: MergeStyle.Straight,\n\t    },\n\t    commit: {\n\t        spacing: 60,\n\t        dot: {\n\t            size: 16,\n\t            strokeColor: \"#000000\",\n\t            strokeWidth: 4,\n\t        },\n\t        message: {\n\t            color: \"black\",\n\t        },\n\t    },\n\t    arrow: {\n\t        size: 16,\n\t        offset: -1.5,\n\t    },\n\t});\n\texports.blackArrowTemplate = blackArrowTemplate;\n\t/**\n\t * Metro template\n\t */\n\tconst metroTemplate = new Template({\n\t    colors: [\"#979797\", \"#008fb5\", \"#f1c109\"],\n\t    branch: {\n\t        lineWidth: 10,\n\t        spacing: 50,\n\t    },\n\t    commit: {\n\t        spacing: 80,\n\t        dot: {\n\t            size: 14,\n\t        },\n\t        message: {\n\t            font: \"normal 14pt Arial\",\n\t        },\n\t    },\n\t});\n\texports.metroTemplate = metroTemplate;\n\tvar TemplateName;\n\t(function (TemplateName) {\n\t    TemplateName[\"Metro\"] = \"metro\";\n\t    TemplateName[\"BlackArrow\"] = \"blackarrow\";\n\t})(TemplateName || (TemplateName = {}));\n\texports.TemplateName = TemplateName;\n\t/**\n\t * Extend an existing template with new options.\n\t *\n\t * @param selectedTemplate Template to extend\n\t * @param options Template options\n\t */\n\tfunction templateExtend(selectedTemplate, options) {\n\t    const template = getTemplate(selectedTemplate);\n\t    if (!options.branch)\n\t        options.branch = {};\n\t    if (!options.commit)\n\t        options.commit = {};\n\t    // This is tedious, but it seems acceptable so we don't need lodash\n\t    // as we want to keep bundlesize small.\n\t    return {\n\t        colors: options.colors || template.colors,\n\t        arrow: Object.assign({}, template.arrow, options.arrow),\n\t        branch: Object.assign({}, template.branch, options.branch, { label: Object.assign({}, template.branch.label, options.branch.label) }),\n\t        commit: Object.assign({}, template.commit, options.commit, { dot: Object.assign({}, template.commit.dot, options.commit.dot), message: Object.assign({}, template.commit.message, options.commit.message) }),\n\t        tag: Object.assign({}, template.tag, options.tag),\n\t    };\n\t}\n\texports.templateExtend = templateExtend;\n\t/**\n\t * Resolve the template to use regarding given `template` value.\n\t *\n\t * @param template Selected template name, or instance.\n\t */\n\tfunction getTemplate(template) {\n\t    if (!template)\n\t        return metroTemplate;\n\t    if (typeof template === \"string\") {\n\t        return {\n\t            [TemplateName.BlackArrow]: blackArrowTemplate,\n\t            [TemplateName.Metro]: metroTemplate,\n\t        }[template];\n\t    }\n\t    return template;\n\t}\n\texports.getTemplate = getTemplate;\n\n\t});\n\n\tunwrapExports(template);\n\tvar template_1 = template.MergeStyle;\n\tvar template_2 = template.DEFAULT_FONT;\n\tvar template_3 = template.Template;\n\tvar template_4 = template.blackArrowTemplate;\n\tvar template_5 = template.metroTemplate;\n\tvar template_6 = template.TemplateName;\n\tvar template_7 = template.templateExtend;\n\tvar template_8 = template.getTemplate;\n\n\tvar tag = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\n\tclass Tag {\n\t    constructor(name, style, render, commitStyle) {\n\t        this.name = name;\n\t        this.tagStyle = style;\n\t        this.commitStyle = commitStyle;\n\t        this.render = render;\n\t    }\n\t    /**\n\t     * Style\n\t     */\n\t    get style() {\n\t        return {\n\t            strokeColor: this.tagStyle.strokeColor || this.commitStyle.color,\n\t            bgColor: this.tagStyle.bgColor || this.commitStyle.color,\n\t            color: this.tagStyle.color || \"white\",\n\t            font: this.tagStyle.font || this.commitStyle.message.font || template.DEFAULT_FONT,\n\t            borderRadius: utils.numberOptionOr(this.tagStyle.borderRadius, 10),\n\t            pointerWidth: utils.numberOptionOr(this.tagStyle.pointerWidth, 12),\n\t        };\n\t    }\n\t}\n\texports.Tag = Tag;\n\n\t});\n\n\tunwrapExports(tag);\n\tvar tag_1 = tag.Tag;\n\n\tvar commit = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\t/**\n\t * Generate a random hash.\n\t *\n\t * @return hex string with 40 chars\n\t */\n\tconst getRandomHash = () => (Math.random()\n\t    .toString(16)\n\t    .substring(3) +\n\t    Math.random()\n\t        .toString(16)\n\t        .substring(3) +\n\t    Math.random()\n\t        .toString(16)\n\t        .substring(3) +\n\t    Math.random()\n\t        .toString(16)\n\t        .substring(3)).substring(0, 40);\n\tclass Commit {\n\t    constructor(options) {\n\t        /**\n\t         * Ref names\n\t         */\n\t        this.refs = [];\n\t        /**\n\t         * Commit x position\n\t         */\n\t        this.x = 0;\n\t        /**\n\t         * Commit y position\n\t         */\n\t        this.y = 0;\n\t        // Set author & committer\n\t        let name, email;\n\t        try {\n\t            [, name, email] = options.author.match(/(.*) <(.*)>/);\n\t        }\n\t        catch (e) {\n\t            [name, email] = [options.author, \"\"];\n\t        }\n\t        this.author = { name, email, timestamp: Date.now() };\n\t        this.committer = { name, email, timestamp: Date.now() };\n\t        // Set commit message\n\t        this.subject = options.subject;\n\t        this.body = options.body || \"\";\n\t        // Set commit hash\n\t        this.hash = options.hash || getRandomHash();\n\t        this.hashAbbrev = this.hash.substring(0, 7);\n\t        // Set parent hash\n\t        this.parents = options.parents ? options.parents : [];\n\t        this.parentsAbbrev = this.parents.map((commit) => commit.substring(0, 7));\n\t        // Set style\n\t        this.style = Object.assign({}, options.style, { message: Object.assign({}, options.style.message), dot: Object.assign({}, options.style.dot) });\n\t        this.dotText = options.dotText;\n\t        // Set callbacks\n\t        this.onClick = () => (options.onClick ? options.onClick(this) : undefined);\n\t        this.onMessageClick = () => options.onMessageClick ? options.onMessageClick(this) : undefined;\n\t        this.onMouseOver = () => options.onMouseOver ? options.onMouseOver(this) : undefined;\n\t        this.onMouseOut = () => options.onMouseOut ? options.onMouseOut(this) : undefined;\n\t        // Set custom renders\n\t        this.renderDot = options.renderDot;\n\t        this.renderMessage = options.renderMessage;\n\t        this.renderTooltip = options.renderTooltip;\n\t    }\n\t    /**\n\t     * Message\n\t     */\n\t    get message() {\n\t        let message = \"\";\n\t        if (this.style.message.displayHash) {\n\t            message += `${this.hashAbbrev} `;\n\t        }\n\t        message += this.subject;\n\t        if (this.style.message.displayAuthor) {\n\t            message += ` - ${this.author.name} <${this.author.email}>`;\n\t        }\n\t        return message;\n\t    }\n\t    /**\n\t     * Branch that should be rendered\n\t     */\n\t    get branchToDisplay() {\n\t        return this.branches ? this.branches[0] : \"\";\n\t    }\n\t    setRefs(refs) {\n\t        this.refs = refs.getNames(this.hash);\n\t        return this;\n\t    }\n\t    setTags(tags, getTagStyle, getTagRender) {\n\t        this.tags = tags\n\t            .getNames(this.hash)\n\t            .map((name) => new tag.Tag(name, getTagStyle(name), getTagRender(name), this.style));\n\t        return this;\n\t    }\n\t    setBranches(branches) {\n\t        this.branches = branches;\n\t        return this;\n\t    }\n\t    setPosition({ x, y }) {\n\t        this.x = x;\n\t        this.y = y;\n\t        return this;\n\t    }\n\t    withDefaultColor(color) {\n\t        const newStyle = Object.assign({}, this.style, { dot: Object.assign({}, this.style.dot), message: Object.assign({}, this.style.message) });\n\t        if (!newStyle.color)\n\t            newStyle.color = color;\n\t        if (!newStyle.dot.color)\n\t            newStyle.dot.color = color;\n\t        if (!newStyle.message.color)\n\t            newStyle.message.color = color;\n\t        const commit = this.cloneCommit();\n\t        commit.style = newStyle;\n\t        return commit;\n\t    }\n\t    /**\n\t     * Ideally, we want Commit to be a [Value Object](https://martinfowler.com/bliki/ValueObject.html).\n\t     * We started with a mutable class. So we'll refactor that little by little.\n\t     * This private function is a helper to create a new Commit from existing one.\n\t     */\n\t    cloneCommit() {\n\t        const commit = new Commit({\n\t            author: `${this.author.name} <${this.author.email}>`,\n\t            subject: this.subject,\n\t            style: this.style,\n\t            body: this.body,\n\t            hash: this.hash,\n\t            parents: this.parents,\n\t            dotText: this.dotText,\n\t            onClick: this.onClick,\n\t            onMessageClick: this.onMessageClick,\n\t            onMouseOver: this.onMouseOver,\n\t            onMouseOut: this.onMouseOut,\n\t            renderDot: this.renderDot,\n\t            renderMessage: this.renderMessage,\n\t            renderTooltip: this.renderTooltip,\n\t        });\n\t        commit.refs = this.refs;\n\t        commit.branches = this.branches;\n\t        commit.tags = this.tags;\n\t        commit.x = this.x;\n\t        commit.y = this.y;\n\t        return commit;\n\t    }\n\t}\n\texports.Commit = Commit;\n\n\t});\n\n\tunwrapExports(commit);\n\tvar commit_1 = commit.Commit;\n\n\tvar branchUserApi = createCommonjsModule(function (module, exports) {\n\tvar __rest = (commonjsGlobal && commonjsGlobal.__rest) || function (s, e) {\n\t    var t = {};\n\t    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n\t        t[p] = s[p];\n\t    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n\t        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n\t            t[p[i]] = s[p[i]];\n\t    return t;\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\n\tclass BranchUserApi {\n\t    // tslint:enable:variable-name\n\t    constructor(branch, graph, onGraphUpdate) {\n\t        this._branch = branch;\n\t        this.name = branch.name;\n\t        this._graph = graph;\n\t        this._onGraphUpdate = onGraphUpdate;\n\t    }\n\t    branch(args) {\n\t        const options = typeof args === \"string\" ? { name: args } : args;\n\t        options.from = this;\n\t        return this._graph.createBranch(options).getUserApi();\n\t    }\n\t    commit(options) {\n\t        // Deal with shorter syntax\n\t        if (typeof options === \"string\")\n\t            options = { subject: options };\n\t        if (!options)\n\t            options = {};\n\t        this._commitWithParents(options, []);\n\t        this._onGraphUpdate();\n\t        return this;\n\t    }\n\t    merge(...args) {\n\t        let options = args[0];\n\t        if (!isBranchMergeOptions(options)) {\n\t            options = {\n\t                branch: args[0],\n\t                fastForward: false,\n\t                commitOptions: { subject: args[1] },\n\t            };\n\t        }\n\t        const { branch, fastForward, commitOptions, } = options;\n\t        const branchName = typeof branch === \"string\" ? branch : branch.name;\n\t        const branchLastCommitHash = this._graph.refs.getCommit(branchName);\n\t        if (!branchLastCommitHash) {\n\t            throw new Error(`The branch called \"${branchName}\" is unknown`);\n\t        }\n\t        let canFastForward = false;\n\t        const lastCommitHash = this._graph.refs.getCommit(this._branch.name);\n\t        if (lastCommitHash) {\n\t            canFastForward = this._areCommitsConnected(lastCommitHash, branchLastCommitHash);\n\t        }\n\t        else {\n\t            canFastForward = false;\n\t        }\n\t        if (fastForward && canFastForward) {\n\t            this._fastForwardTo(branchLastCommitHash);\n\t        }\n\t        else {\n\t            this._commitWithParents(Object.assign({}, commitOptions, { subject: (commitOptions && commitOptions.subject) ||\n\t                    `Merge branch ${branchName}` }), [branchLastCommitHash]);\n\t        }\n\t        this._onGraphUpdate();\n\t        return this;\n\t    }\n\t    tag(options) {\n\t        if (typeof options === \"string\") {\n\t            this._graph.getUserApi().tag({ name: options, ref: this._branch.name });\n\t        }\n\t        else {\n\t            this._graph.getUserApi().tag(Object.assign({}, options, { ref: this._branch.name }));\n\t        }\n\t        return this;\n\t    }\n\t    /**\n\t     * Checkout onto this branch.\n\t     */\n\t    checkout() {\n\t        this._graph.currentBranch = this._branch;\n\t        return this;\n\t    }\n\t    // tslint:disable:variable-name - Prefix `_` = explicitly private for JS users\n\t    _commitWithParents(options, parents) {\n\t        const parentOnSameBranch = this._graph.refs.getCommit(this._branch.name);\n\t        if (parentOnSameBranch) {\n\t            parents.unshift(parentOnSameBranch);\n\t        }\n\t        else if (this._branch.parentCommitHash) {\n\t            parents.unshift(this._branch.parentCommitHash);\n\t        }\n\t        const { tag } = options, commitOptions = __rest(options, [\"tag\"]);\n\t        const commit$1 = new commit.Commit(Object.assign({ hash: this._graph.generateCommitHash(), author: this._branch.commitDefaultOptions.author || this._graph.author, subject: this._branch.commitDefaultOptions.subject ||\n\t                this._graph.commitMessage }, commitOptions, { parents, style: this._getCommitStyle(options.style) }));\n\t        if (parentOnSameBranch) {\n\t            // Take all the refs from the parent\n\t            const parentRefs = this._graph.refs.getNames(parentOnSameBranch);\n\t            parentRefs.forEach((ref) => this._graph.refs.set(ref, commit$1.hash));\n\t        }\n\t        else {\n\t            // Set the branch ref\n\t            this._graph.refs.set(this._branch.name, commit$1.hash);\n\t        }\n\t        // Add the new commit\n\t        this._graph.commits.push(commit$1);\n\t        // Move HEAD on the last commit\n\t        this.checkout();\n\t        this._graph.refs.set(\"HEAD\", commit$1.hash);\n\t        // Add a tag to the commit if `option.tag` is provide\n\t        if (tag)\n\t            this.tag(tag);\n\t    }\n\t    _areCommitsConnected(parentCommitHash, childCommitHash) {\n\t        const childCommit = this._graph.commits.find(({ hash }) => childCommitHash === hash);\n\t        if (!childCommit)\n\t            return false;\n\t        const isFirstCommitOfGraph = childCommit.parents.length === 0;\n\t        if (isFirstCommitOfGraph)\n\t            return false;\n\t        if (childCommit.parents.includes(parentCommitHash)) {\n\t            return true;\n\t        }\n\t        // `childCommitHash` is not a direct child of `parentCommitHash`.\n\t        // But maybe one of `childCommitHash` parent is.\n\t        return childCommit.parents.some((directParentHash) => this._areCommitsConnected(parentCommitHash, directParentHash));\n\t    }\n\t    _fastForwardTo(commitHash) {\n\t        this._graph.refs.set(this._branch.name, commitHash);\n\t    }\n\t    _getCommitStyle(style = {}) {\n\t        return Object.assign({}, utils.withoutUndefinedKeys(this._graph.template.commit), utils.withoutUndefinedKeys(this._branch.commitDefaultOptions.style), style, { message: Object.assign({}, utils.withoutUndefinedKeys(this._graph.template.commit.message), utils.withoutUndefinedKeys(this._branch.commitDefaultOptions.style.message), style.message, utils.withoutUndefinedKeys({\n\t                display: this._graph.shouldDisplayCommitMessage && undefined,\n\t            })), dot: Object.assign({}, utils.withoutUndefinedKeys(this._graph.template.commit.dot), utils.withoutUndefinedKeys(this._branch.commitDefaultOptions.style.dot), style.dot) });\n\t    }\n\t}\n\texports.BranchUserApi = BranchUserApi;\n\tfunction isBranchMergeOptions(options) {\n\t    return typeof options === \"object\" && !(options instanceof BranchUserApi);\n\t}\n\n\t});\n\n\tunwrapExports(branchUserApi);\n\tvar branchUserApi_1 = branchUserApi.BranchUserApi;\n\n\tvar branch = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\tconst DELETED_BRANCH_NAME = \"\";\n\texports.DELETED_BRANCH_NAME = DELETED_BRANCH_NAME;\n\tclass Branch {\n\t    constructor(options) {\n\t        this.gitgraph = options.gitgraph;\n\t        this.name = options.name;\n\t        this.style = options.style;\n\t        this.parentCommitHash = options.parentCommitHash;\n\t        this.commitDefaultOptions = options.commitDefaultOptions || { style: {} };\n\t        this.onGraphUpdate = options.onGraphUpdate;\n\t        this.renderLabel = options.renderLabel;\n\t    }\n\t    /**\n\t     * Return the API to manipulate Gitgraph branch as a user.\n\t     */\n\t    getUserApi() {\n\t        return new branchUserApi.BranchUserApi(this, this.gitgraph, this.onGraphUpdate);\n\t    }\n\t    /**\n\t     * Return true if branch was deleted.\n\t     */\n\t    isDeleted() {\n\t        return this.name === DELETED_BRANCH_NAME;\n\t    }\n\t}\n\texports.Branch = Branch;\n\tfunction createDeletedBranch(gitgraph, style, onGraphUpdate) {\n\t    return new Branch({\n\t        name: DELETED_BRANCH_NAME,\n\t        gitgraph,\n\t        style,\n\t        onGraphUpdate,\n\t    });\n\t}\n\texports.createDeletedBranch = createDeletedBranch;\n\n\t});\n\n\tunwrapExports(branch);\n\tvar branch_1 = branch.DELETED_BRANCH_NAME;\n\tvar branch_2 = branch.Branch;\n\tvar branch_3 = branch.createDeletedBranch;\n\n\tvar mode = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar Mode;\n\t(function (Mode) {\n\t    Mode[\"Compact\"] = \"compact\";\n\t})(Mode || (Mode = {}));\n\texports.Mode = Mode;\n\n\t});\n\n\tunwrapExports(mode);\n\tvar mode_1 = mode.Mode;\n\n\tvar regular = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tclass RegularGraphRows {\n\t    constructor(commits) {\n\t        this.rows = new Map();\n\t        this.maxRowCache = undefined;\n\t        this.computeRowsFromCommits(commits);\n\t    }\n\t    getRowOf(commitHash) {\n\t        return this.rows.get(commitHash) || 0;\n\t    }\n\t    getMaxRow() {\n\t        if (this.maxRowCache === undefined) {\n\t            this.maxRowCache = uniq(Array.from(this.rows.values())).length - 1;\n\t        }\n\t        return this.maxRowCache;\n\t    }\n\t    computeRowsFromCommits(commits) {\n\t        commits.forEach((commit, i) => {\n\t            this.rows.set(commit.hash, i);\n\t        });\n\t        this.maxRowCache = undefined;\n\t    }\n\t}\n\texports.RegularGraphRows = RegularGraphRows;\n\t/**\n\t * Creates a duplicate-free version of an array.\n\t *\n\t * Don't use lodash's `uniq` as it increased bundlesize a lot for such a\n\t * simple function.\n\t * => The way we bundle for browser seems not to work with `lodash-es`.\n\t * => I didn't to get tree-shaking to work with `lodash` (the CommonJS version).\n\t *\n\t * @param array Array of values\n\t */\n\tfunction uniq(array) {\n\t    const set = new Set();\n\t    array.forEach((value) => set.add(value));\n\t    return Array.from(set);\n\t}\n\n\t});\n\n\tunwrapExports(regular);\n\tvar regular_1 = regular.RegularGraphRows;\n\n\tvar compact = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\tclass CompactGraphRows extends regular.RegularGraphRows {\n\t    computeRowsFromCommits(commits) {\n\t        commits.forEach((commit, i) => {\n\t            let newRow = i;\n\t            const isFirstCommit = i === 0;\n\t            if (!isFirstCommit) {\n\t                const parentRow = this.getRowOf(commit.parents[0]);\n\t                const historyParent = commits[i - 1];\n\t                newRow = Math.max(parentRow + 1, this.getRowOf(historyParent.hash));\n\t                const isMergeCommit = commit.parents.length > 1;\n\t                if (isMergeCommit) {\n\t                    // Push commit to next row to avoid collision when the branch in which\n\t                    // the merge happens has more commits than the merged branch.\n\t                    const mergeTargetParentRow = this.getRowOf(commit.parents[1]);\n\t                    if (parentRow < mergeTargetParentRow)\n\t                        newRow++;\n\t                }\n\t            }\n\t            this.rows.set(commit.hash, newRow);\n\t        });\n\t    }\n\t}\n\texports.CompactGraphRows = CompactGraphRows;\n\n\t});\n\n\tunwrapExports(compact);\n\tvar compact_1 = compact.CompactGraphRows;\n\n\tvar graphRows = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\n\n\texports.GraphRows = regular.RegularGraphRows;\n\tfunction createGraphRows(mode$1, commits) {\n\t    return mode$1 === mode.Mode.Compact\n\t        ? new compact.CompactGraphRows(commits)\n\t        : new regular.RegularGraphRows(commits);\n\t}\n\texports.createGraphRows = createGraphRows;\n\n\t});\n\n\tunwrapExports(graphRows);\n\tvar graphRows_1 = graphRows.GraphRows;\n\tvar graphRows_2 = graphRows.createGraphRows;\n\n\tvar branchesOrder = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tclass BranchesOrder {\n\t    constructor(commits, colors, compareFunction) {\n\t        this.branches = new Set();\n\t        this.colors = colors;\n\t        commits.forEach((commit) => this.branches.add(commit.branchToDisplay));\n\t        if (compareFunction) {\n\t            this.branches = new Set(Array.from(this.branches).sort(compareFunction));\n\t        }\n\t    }\n\t    /**\n\t     * Return the order of the given branch name.\n\t     *\n\t     * @param branchName Name of the branch\n\t     */\n\t    get(branchName) {\n\t        return Array.from(this.branches).findIndex((branch) => branch === branchName);\n\t    }\n\t    /**\n\t     * Return the color of the given branch.\n\t     *\n\t     * @param branchName Name of the branch\n\t     */\n\t    getColorOf(branchName) {\n\t        return this.colors[this.get(branchName) % this.colors.length];\n\t    }\n\t}\n\texports.BranchesOrder = BranchesOrder;\n\n\t});\n\n\tunwrapExports(branchesOrder);\n\tvar branchesOrder_1 = branchesOrder.BranchesOrder;\n\n\tvar refs = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tclass Refs {\n\t    constructor() {\n\t        this.commitPerName = new Map();\n\t        this.namesPerCommit = new Map();\n\t    }\n\t    /**\n\t     * Set a new reference to a commit hash.\n\t     *\n\t     * @param name Name of the ref (ex: \"master\", \"v1.0\")\n\t     * @param commitHash Commit hash\n\t     */\n\t    set(name, commitHash) {\n\t        const prevCommitHash = this.commitPerName.get(name);\n\t        if (prevCommitHash) {\n\t            this.removeNameFrom(prevCommitHash, name);\n\t        }\n\t        this.addNameTo(commitHash, name);\n\t        this.addCommitTo(name, commitHash);\n\t        return this;\n\t    }\n\t    /**\n\t     * Get the commit hash associated with the given reference name.\n\t     *\n\t     * @param name Name of the ref\n\t     */\n\t    getCommit(name) {\n\t        return this.commitPerName.get(name);\n\t    }\n\t    /**\n\t     * Get the list of reference names associated with given commit hash.\n\t     *\n\t     * @param commitHash Commit hash\n\t     */\n\t    getNames(commitHash) {\n\t        return this.namesPerCommit.get(commitHash) || [];\n\t    }\n\t    /**\n\t     * Get all reference names known.\n\t     */\n\t    getAllNames() {\n\t        return Array.from(this.commitPerName.keys());\n\t    }\n\t    /**\n\t     * Returns true if given commit hash is referenced.\n\t     *\n\t     * @param commitHash Commit hash\n\t     */\n\t    hasCommit(commitHash) {\n\t        return this.namesPerCommit.has(commitHash);\n\t    }\n\t    /**\n\t     * Returns true if given reference name exists.\n\t     *\n\t     * @param name Name of the ref\n\t     */\n\t    hasName(name) {\n\t        return this.commitPerName.has(name);\n\t    }\n\t    removeNameFrom(commitHash, nameToRemove) {\n\t        const names = this.namesPerCommit.get(commitHash) || [];\n\t        this.namesPerCommit.set(commitHash, names.filter((name) => name !== nameToRemove));\n\t    }\n\t    addNameTo(commitHash, nameToAdd) {\n\t        const prevNames = this.namesPerCommit.get(commitHash) || [];\n\t        this.namesPerCommit.set(commitHash, [...prevNames, nameToAdd]);\n\t    }\n\t    addCommitTo(name, commitHashToAdd) {\n\t        this.commitPerName.set(name, commitHashToAdd);\n\t    }\n\t}\n\texports.Refs = Refs;\n\n\t});\n\n\tunwrapExports(refs);\n\tvar refs_1 = refs.Refs;\n\n\tvar branchesPaths = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\t/**\n\t * Calculate branches paths of the graph.\n\t *\n\t * It follows the Command pattern:\n\t * => a class with a single `execute()` public method.\n\t *\n\t * Main benefit is we can split computation in smaller steps without\n\t * passing around parameters (we can rely on private data).\n\t */\n\tclass BranchesPathsCalculator {\n\t    constructor(commits, branches, commitSpacing, isGraphVertical, isGraphReverse, createDeletedBranch) {\n\t        this.branchesPaths = new Map();\n\t        this.commits = commits;\n\t        this.branches = branches;\n\t        this.commitSpacing = commitSpacing;\n\t        this.isGraphVertical = isGraphVertical;\n\t        this.isGraphReverse = isGraphReverse;\n\t        this.createDeletedBranch = createDeletedBranch;\n\t    }\n\t    /**\n\t     * Compute branches paths for graph.\n\t     */\n\t    execute() {\n\t        this.fromCommits();\n\t        this.withMergeCommits();\n\t        return this.smoothBranchesPaths();\n\t    }\n\t    /**\n\t     * Initialize branches paths from calculator's commits.\n\t     */\n\t    fromCommits() {\n\t        this.commits.forEach((commit) => {\n\t            let branch = this.branches.get(commit.branchToDisplay);\n\t            if (!branch) {\n\t                // NB: may not work properly if there are many deleted branches.\n\t                branch = this.getDeletedBranchInPath() || this.createDeletedBranch();\n\t            }\n\t            const path = [];\n\t            const existingBranchPath = this.branchesPaths.get(branch);\n\t            const firstParentCommit = this.commits.find(({ hash }) => hash === commit.parents[0]);\n\t            if (existingBranchPath) {\n\t                path.push(...existingBranchPath);\n\t            }\n\t            else if (firstParentCommit) {\n\t                // Make branch path starts from parent branch (parent commit).\n\t                path.push({ x: firstParentCommit.x, y: firstParentCommit.y });\n\t            }\n\t            path.push({ x: commit.x, y: commit.y });\n\t            this.branchesPaths.set(branch, path);\n\t        });\n\t    }\n\t    /**\n\t     * Insert merge commits points into `branchesPaths`.\n\t     *\n\t     * @example\n\t     *     // Before\n\t     *     [\n\t     *       { x: 0, y: 640 },\n\t     *       { x: 50, y: 560 }\n\t     *     ]\n\t     *\n\t     *     // After\n\t     *     [\n\t     *       { x: 0, y: 640 },\n\t     *       { x: 50, y: 560 },\n\t     *       { x: 50, y: 560, mergeCommit: true }\n\t     *     ]\n\t     */\n\t    withMergeCommits() {\n\t        const mergeCommits = this.commits.filter(({ parents }) => parents.length > 1);\n\t        mergeCommits.forEach((mergeCommit) => {\n\t            const parentOnOriginBranch = this.commits.find(({ hash }) => {\n\t                return hash === mergeCommit.parents[1];\n\t            });\n\t            if (!parentOnOriginBranch)\n\t                return;\n\t            const originBranchName = parentOnOriginBranch.branches\n\t                ? parentOnOriginBranch.branches[0]\n\t                : \"\";\n\t            let branch = this.branches.get(originBranchName);\n\t            if (!branch) {\n\t                branch = this.getDeletedBranchInPath();\n\t                if (!branch) {\n\t                    // Still no branch? That's strange, we shouldn't set anything.\n\t                    return;\n\t                }\n\t            }\n\t            const lastPoints = [...(this.branchesPaths.get(branch) || [])];\n\t            this.branchesPaths.set(branch, [\n\t                ...lastPoints,\n\t                { x: mergeCommit.x, y: mergeCommit.y, mergeCommit: true },\n\t            ]);\n\t        });\n\t    }\n\t    /**\n\t     * Retrieve deleted branch from calculator's branches paths.\n\t     */\n\t    getDeletedBranchInPath() {\n\t        return Array.from(this.branchesPaths.keys()).find((branch) => branch.isDeleted());\n\t    }\n\t    /**\n\t     * Smooth all paths by putting points on each row.\n\t     */\n\t    smoothBranchesPaths() {\n\t        const branchesPaths = new Map();\n\t        this.branchesPaths.forEach((points, branch) => {\n\t            if (points.length <= 1) {\n\t                branchesPaths.set(branch, [points]);\n\t                return;\n\t            }\n\t            // Cut path on each merge commits\n\t            // Coordinate[] -> Coordinate[][]\n\t            if (this.isGraphVertical) {\n\t                points = points.sort((a, b) => (a.y > b.y ? -1 : 1));\n\t            }\n\t            else {\n\t                points = points.sort((a, b) => (a.x > b.x ? 1 : -1));\n\t            }\n\t            if (this.isGraphReverse) {\n\t                points = points.reverse();\n\t            }\n\t            const paths = points.reduce((mem, point, i) => {\n\t                if (point.mergeCommit) {\n\t                    mem[mem.length - 1].push(utils.pick(point, [\"x\", \"y\"]));\n\t                    if (points[i - 1])\n\t                        mem.push([points[i - 1]]);\n\t                }\n\t                else {\n\t                    mem[mem.length - 1].push(point);\n\t                }\n\t                return mem;\n\t            }, [[]]);\n\t            if (this.isGraphReverse) {\n\t                paths.forEach((path) => path.reverse());\n\t            }\n\t            // Add intermediate points on each sub paths\n\t            if (this.isGraphVertical) {\n\t                paths.forEach((subPath) => {\n\t                    if (subPath.length <= 1)\n\t                        return;\n\t                    const firstPoint = subPath[0];\n\t                    const lastPoint = subPath[subPath.length - 1];\n\t                    const column = subPath[1].x;\n\t                    const branchSize = Math.round(Math.abs(firstPoint.y - lastPoint.y) / this.commitSpacing) - 1;\n\t                    const branchPoints = branchSize > 0\n\t                        ? new Array(branchSize).fill(0).map((_, i) => ({\n\t                            x: column,\n\t                            y: subPath[0].y - this.commitSpacing * (i + 1),\n\t                        }))\n\t                        : [];\n\t                    const lastSubPaths = branchesPaths.get(branch) || [];\n\t                    branchesPaths.set(branch, [\n\t                        ...lastSubPaths,\n\t                        [firstPoint, ...branchPoints, lastPoint],\n\t                    ]);\n\t                });\n\t            }\n\t            else {\n\t                paths.forEach((subPath) => {\n\t                    if (subPath.length <= 1)\n\t                        return;\n\t                    const firstPoint = subPath[0];\n\t                    const lastPoint = subPath[subPath.length - 1];\n\t                    const column = subPath[1].y;\n\t                    const branchSize = Math.round(Math.abs(firstPoint.x - lastPoint.x) / this.commitSpacing) - 1;\n\t                    const branchPoints = branchSize > 0\n\t                        ? new Array(branchSize).fill(0).map((_, i) => ({\n\t                            y: column,\n\t                            x: subPath[0].x + this.commitSpacing * (i + 1),\n\t                        }))\n\t                        : [];\n\t                    const lastSubPaths = branchesPaths.get(branch) || [];\n\t                    branchesPaths.set(branch, [\n\t                        ...lastSubPaths,\n\t                        [firstPoint, ...branchPoints, lastPoint],\n\t                    ]);\n\t                });\n\t            }\n\t        });\n\t        return branchesPaths;\n\t    }\n\t}\n\texports.BranchesPathsCalculator = BranchesPathsCalculator;\n\t/**\n\t * Return a string ready to use in `svg.path.d` from coordinates\n\t *\n\t * @param coordinates Collection of coordinates\n\t */\n\tfunction toSvgPath(coordinates, isBezier, isVertical) {\n\t    return coordinates\n\t        .map((path) => \"M\" +\n\t        path\n\t            .map(({ x, y }, i, points) => {\n\t            if (isBezier &&\n\t                points.length > 1 &&\n\t                (i === 1 || i === points.length - 1)) {\n\t                const previous = points[i - 1];\n\t                if (isVertical) {\n\t                    const middleY = (previous.y + y) / 2;\n\t                    return `C ${previous.x} ${middleY} ${x} ${middleY} ${x} ${y}`;\n\t                }\n\t                else {\n\t                    const middleX = (previous.x + x) / 2;\n\t                    return `C ${middleX} ${previous.y} ${middleX} ${y} ${x} ${y}`;\n\t                }\n\t            }\n\t            return `L ${x} ${y}`;\n\t        })\n\t            .join(\" \")\n\t            .slice(1))\n\t        .join(\" \");\n\t}\n\texports.toSvgPath = toSvgPath;\n\n\t});\n\n\tunwrapExports(branchesPaths);\n\tvar branchesPaths_1 = branchesPaths.BranchesPathsCalculator;\n\tvar branchesPaths_2 = branchesPaths.toSvgPath;\n\n\tvar gitgraphUserApi = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\n\n\tclass GitgraphUserApi {\n\t    // tslint:enable:variable-name\n\t    constructor(graph, onGraphUpdate) {\n\t        this._graph = graph;\n\t        this._onGraphUpdate = onGraphUpdate;\n\t    }\n\t    /**\n\t     * Clear everything (as `rm -rf .git && git init`).\n\t     */\n\t    clear() {\n\t        this._graph.refs = new refs.Refs();\n\t        this._graph.tags = new refs.Refs();\n\t        this._graph.commits = [];\n\t        this._graph.branches = new Map();\n\t        this._graph.currentBranch = this._graph.createBranch(\"master\");\n\t        this._onGraphUpdate();\n\t        return this;\n\t    }\n\t    commit(options) {\n\t        this._graph.currentBranch.getUserApi().commit(options);\n\t        return this;\n\t    }\n\t    branch(args) {\n\t        return this._graph.createBranch(args).getUserApi();\n\t    }\n\t    tag(...args) {\n\t        // Deal with shorter syntax\n\t        let name;\n\t        let ref;\n\t        let style;\n\t        let render;\n\t        if (typeof args[0] === \"string\") {\n\t            name = args[0];\n\t            ref = args[1];\n\t        }\n\t        else {\n\t            name = args[0].name;\n\t            ref = args[0].ref;\n\t            style = args[0].style;\n\t            render = args[0].render;\n\t        }\n\t        if (!ref) {\n\t            const head = this._graph.refs.getCommit(\"HEAD\");\n\t            if (!head)\n\t                return this;\n\t            ref = head;\n\t        }\n\t        let commitHash;\n\t        if (this._graph.refs.hasCommit(ref)) {\n\t            // `ref` is a `Commit[\"hash\"]`\n\t            commitHash = ref;\n\t        }\n\t        if (this._graph.refs.hasName(ref)) {\n\t            // `ref` is a `Branch[\"name\"]`\n\t            commitHash = this._graph.refs.getCommit(ref);\n\t        }\n\t        if (!commitHash) {\n\t            throw new Error(`The ref \"${ref}\" does not exist`);\n\t        }\n\t        this._graph.tags.set(name, commitHash);\n\t        this._graph.tagStyles[name] = style;\n\t        this._graph.tagRenders[name] = render;\n\t        this._onGraphUpdate();\n\t        return this;\n\t    }\n\t    /**\n\t     * Import a JSON.\n\t     *\n\t     * Data can't be typed since it comes from a JSON.\n\t     * We validate input format and throw early if something is invalid.\n\t     *\n\t     * @experimental\n\t     * @param data JSON from `git2json` output\n\t     */\n\t    import(data) {\n\t        const invalidData = new Error(\"Only `git2json` format is supported for imported data.\");\n\t        // We manually validate input data instead of using a lib like yup.\n\t        // => this is to keep bundlesize small.\n\t        if (!Array.isArray(data)) {\n\t            throw invalidData;\n\t        }\n\t        const areDataValid = data.every((options) => {\n\t            return (typeof options === \"object\" &&\n\t                typeof options.author === \"object\" &&\n\t                Array.isArray(options.refs));\n\t        });\n\t        if (!areDataValid) {\n\t            throw invalidData;\n\t        }\n\t        const commitOptionsList = data\n\t            .map((options) => (Object.assign({}, options, { style: Object.assign({}, this._graph.template.commit, { message: Object.assign({}, this._graph.template.commit.message, { display: this._graph.shouldDisplayCommitMessage }) }), author: `${options.author.name} <${options.author.email}>` })))\n\t            // Git2json outputs is reverse-chronological.\n\t            // We need to commit it chronological order.\n\t            .reverse();\n\t        // Use validated `value`.\n\t        this.clear();\n\t        this._graph.commits = commitOptionsList.map((options) => new commit.Commit(options));\n\t        // Create tags & refs.\n\t        commitOptionsList.forEach(({ refs, hash }) => {\n\t            if (!refs)\n\t                return;\n\t            if (!hash)\n\t                return;\n\t            const TAG_PREFIX = \"tag: \";\n\t            const tags = refs\n\t                .map((ref) => ref.split(TAG_PREFIX))\n\t                .map(([_, tag]) => tag)\n\t                .filter((tag) => typeof tag === \"string\");\n\t            tags.forEach((tag) => this._graph.tags.set(tag, hash));\n\t            refs\n\t                .filter((ref) => !ref.startsWith(TAG_PREFIX))\n\t                .forEach((ref) => this._graph.refs.set(ref, hash));\n\t        });\n\t        // Create branches.\n\t        const branches = this._getBranches();\n\t        this._graph.commits\n\t            .map((commit) => this._withBranches(branches, commit))\n\t            .reduce((mem, commit) => {\n\t            if (!commit.branches)\n\t                return mem;\n\t            commit.branches.forEach((branch) => mem.add(branch));\n\t            return mem;\n\t        }, new Set())\n\t            .forEach((branch) => this.branch(branch));\n\t        this._onGraphUpdate();\n\t        return this;\n\t    }\n\t    // tslint:disable:variable-name - Prefix `_` = explicitly private for JS users\n\t    // TODO: get rid of these duplicated private methods.\n\t    //\n\t    // These belong to Gitgraph. It is duplicated because of `import()`.\n\t    // `import()` should use regular user API instead.\n\t    _withBranches(branches, commit) {\n\t        let commitBranches = Array.from((branches.get(commit.hash) || new Set()).values());\n\t        if (commitBranches.length === 0) {\n\t            // No branch => branch has been deleted.\n\t            commitBranches = [branch.DELETED_BRANCH_NAME];\n\t        }\n\t        return commit.setBranches(commitBranches);\n\t    }\n\t    _getBranches() {\n\t        const result = new Map();\n\t        const queue = [];\n\t        const branches = this._graph.refs\n\t            .getAllNames()\n\t            .filter((name) => name !== \"HEAD\");\n\t        branches.forEach((branch) => {\n\t            const commitHash = this._graph.refs.getCommit(branch);\n\t            if (commitHash) {\n\t                queue.push(commitHash);\n\t            }\n\t            while (queue.length > 0) {\n\t                const currentHash = queue.pop();\n\t                const current = this._graph.commits.find(({ hash }) => hash === currentHash);\n\t                const prevBranches = result.get(currentHash) || new Set();\n\t                prevBranches.add(branch);\n\t                result.set(currentHash, prevBranches);\n\t                if (current.parents.length > 0) {\n\t                    queue.push(current.parents[0]);\n\t                }\n\t            }\n\t        });\n\t        return result;\n\t    }\n\t}\n\texports.GitgraphUserApi = GitgraphUserApi;\n\n\t});\n\n\tunwrapExports(gitgraphUserApi);\n\tvar gitgraphUserApi_1 = gitgraphUserApi.GitgraphUserApi;\n\n\tvar gitgraph = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\n\n\n\n\n\n\n\n\n\tclass GitgraphCore {\n\t    constructor(options = {}) {\n\t        this.refs = new refs.Refs();\n\t        this.tags = new refs.Refs();\n\t        this.tagStyles = {};\n\t        this.tagRenders = {};\n\t        this.commits = [];\n\t        this.branches = new Map();\n\t        this.listeners = [];\n\t        this.nextTimeoutId = null;\n\t        this.template = template.getTemplate(options.template);\n\t        // Set a default `master` branch\n\t        this.currentBranch = this.createBranch(\"master\");\n\t        // Set all options with default values\n\t        this.orientation = options.orientation;\n\t        this.reverseArrow = utils.booleanOptionOr(options.reverseArrow, false);\n\t        this.initCommitOffsetX = utils.numberOptionOr(options.initCommitOffsetX, 0);\n\t        this.initCommitOffsetY = utils.numberOptionOr(options.initCommitOffsetY, 0);\n\t        this.mode = options.mode;\n\t        this.author = options.author || \"Sergio Flores <saxo-guy@epic.com>\";\n\t        this.commitMessage =\n\t            options.commitMessage || \"He doesn't like George Michael! Boooo!\";\n\t        this.generateCommitHash =\n\t            typeof options.generateCommitHash === \"function\"\n\t                ? options.generateCommitHash\n\t                : () => undefined;\n\t        this.branchesOrderFunction =\n\t            typeof options.compareBranchesOrder === \"function\"\n\t                ? options.compareBranchesOrder\n\t                : undefined;\n\t        this.branchLabelOnEveryCommit = utils.booleanOptionOr(options.branchLabelOnEveryCommit, false);\n\t    }\n\t    get isHorizontal() {\n\t        return (this.orientation === orientation.Orientation.Horizontal ||\n\t            this.orientation === orientation.Orientation.HorizontalReverse);\n\t    }\n\t    get isVertical() {\n\t        return !this.isHorizontal;\n\t    }\n\t    get isReverse() {\n\t        return (this.orientation === orientation.Orientation.HorizontalReverse ||\n\t            this.orientation === orientation.Orientation.VerticalReverse);\n\t    }\n\t    get shouldDisplayCommitMessage() {\n\t        return !this.isHorizontal && this.mode !== mode.Mode.Compact;\n\t    }\n\t    /**\n\t     * Return the API to manipulate Gitgraph as a user.\n\t     * Rendering library should give that API to their consumer.\n\t     */\n\t    getUserApi() {\n\t        return new gitgraphUserApi.GitgraphUserApi(this, () => this.next());\n\t    }\n\t    /**\n\t     * Add a change listener.\n\t     * It will be called any time the graph have changed (commit, merge…).\n\t     *\n\t     * @param listener A callback to be invoked on every change.\n\t     * @returns A function to remove this change listener.\n\t     */\n\t    subscribe(listener) {\n\t        this.listeners.push(listener);\n\t        let isSubscribed = true;\n\t        return () => {\n\t            if (!isSubscribed)\n\t                return;\n\t            isSubscribed = false;\n\t            const index = this.listeners.indexOf(listener);\n\t            this.listeners.splice(index, 1);\n\t        };\n\t    }\n\t    /**\n\t     * Return all data required for rendering.\n\t     * Rendering libraries will use this to implement their rendering strategy.\n\t     */\n\t    getRenderedData() {\n\t        const commits = this.computeRenderedCommits();\n\t        const branchesPaths = this.computeRenderedBranchesPaths(commits);\n\t        const commitMessagesX = this.computeCommitMessagesX(branchesPaths);\n\t        this.computeBranchesColor(commits, branchesPaths);\n\t        return { commits, branchesPaths, commitMessagesX };\n\t    }\n\t    createBranch(args) {\n\t        const defaultParentBranchName = \"HEAD\";\n\t        let options = {\n\t            gitgraph: this,\n\t            name: \"\",\n\t            parentCommitHash: this.refs.getCommit(defaultParentBranchName),\n\t            style: this.template.branch,\n\t            onGraphUpdate: () => this.next(),\n\t        };\n\t        if (typeof args === \"string\") {\n\t            options.name = args;\n\t            options.parentCommitHash = this.refs.getCommit(defaultParentBranchName);\n\t        }\n\t        else {\n\t            const parentBranchName = args.from\n\t                ? args.from.name\n\t                : defaultParentBranchName;\n\t            const parentCommitHash = this.refs.getCommit(parentBranchName) ||\n\t                (this.refs.hasCommit(args.from) ? args.from : undefined);\n\t            args.style = args.style || {};\n\t            options = Object.assign({}, options, args, { parentCommitHash, style: Object.assign({}, options.style, args.style, { label: Object.assign({}, options.style.label, args.style.label) }) });\n\t        }\n\t        const branch$1 = new branch.Branch(options);\n\t        this.branches.set(branch$1.name, branch$1);\n\t        return branch$1;\n\t    }\n\t    /**\n\t     * Return commits with data for rendering.\n\t     */\n\t    computeRenderedCommits() {\n\t        const branches = this.getBranches();\n\t        const commitsWithBranches = this.commits.map((commit) => this.withBranches(branches, commit));\n\t        const rows = graphRows.createGraphRows(this.mode, this.commits);\n\t        const branchesOrder$1 = new branchesOrder.BranchesOrder(commitsWithBranches, this.template.colors, this.branchesOrderFunction);\n\t        return (commitsWithBranches\n\t            .map((commit) => commit.setRefs(this.refs))\n\t            .map((commit) => this.withPosition(rows, branchesOrder$1, commit))\n\t            // Fallback commit computed color on branch color.\n\t            .map((commit) => commit.withDefaultColor(this.getBranchDefaultColor(branchesOrder$1, commit.branchToDisplay)))\n\t            // Tags need commit style to be computed (with default color).\n\t            .map((commit) => commit.setTags(this.tags, (name) => Object.assign({}, this.tagStyles[name], this.template.tag), (name) => this.tagRenders[name])));\n\t    }\n\t    /**\n\t     * Return branches paths with all data required for rendering.\n\t     *\n\t     * @param commits List of commits with rendering data computed\n\t     */\n\t    computeRenderedBranchesPaths(commits) {\n\t        return new branchesPaths.BranchesPathsCalculator(commits, this.branches, this.template.commit.spacing, this.isVertical, this.isReverse, () => branch.createDeletedBranch(this, this.template.branch, () => this.next())).execute();\n\t    }\n\t    /**\n\t     * Set branches colors based on branches paths.\n\t     *\n\t     * @param commits List of graph commits\n\t     * @param branchesPaths Branches paths to be rendered\n\t     */\n\t    computeBranchesColor(commits, branchesPaths) {\n\t        const branchesOrder$1 = new branchesOrder.BranchesOrder(commits, this.template.colors, this.branchesOrderFunction);\n\t        Array.from(branchesPaths).forEach(([branch]) => {\n\t            branch.computedColor =\n\t                branch.style.color ||\n\t                    this.getBranchDefaultColor(branchesOrder$1, branch.name);\n\t        });\n\t    }\n\t    /**\n\t     * Return commit messages X position for rendering.\n\t     *\n\t     * @param branchesPaths Branches paths to be rendered\n\t     */\n\t    computeCommitMessagesX(branchesPaths) {\n\t        const numberOfColumns = Array.from(branchesPaths).length;\n\t        return numberOfColumns * this.template.branch.spacing;\n\t    }\n\t    /**\n\t     * Add `branches` property to commit.\n\t     *\n\t     * @param branches All branches mapped by commit hash\n\t     * @param commit Commit\n\t     */\n\t    withBranches(branches, commit) {\n\t        let commitBranches = Array.from((branches.get(commit.hash) || new Set()).values());\n\t        if (commitBranches.length === 0) {\n\t            // No branch => branch has been deleted.\n\t            commitBranches = [branch.DELETED_BRANCH_NAME];\n\t        }\n\t        return commit.setBranches(commitBranches);\n\t    }\n\t    /**\n\t     * Get all branches from current commits.\n\t     */\n\t    getBranches() {\n\t        const result = new Map();\n\t        const queue = [];\n\t        const branches = this.refs.getAllNames().filter((name) => name !== \"HEAD\");\n\t        branches.forEach((branch) => {\n\t            const commitHash = this.refs.getCommit(branch);\n\t            if (commitHash) {\n\t                queue.push(commitHash);\n\t            }\n\t            while (queue.length > 0) {\n\t                const currentHash = queue.pop();\n\t                const current = this.commits.find(({ hash }) => hash === currentHash);\n\t                const prevBranches = result.get(currentHash) || new Set();\n\t                prevBranches.add(branch);\n\t                result.set(currentHash, prevBranches);\n\t                if (current.parents.length > 0) {\n\t                    queue.push(current.parents[0]);\n\t                }\n\t            }\n\t        });\n\t        return result;\n\t    }\n\t    /**\n\t     * Add position to given commit.\n\t     *\n\t     * @param rows Graph rows\n\t     * @param branchesOrder Computed order of branches\n\t     * @param commit Commit to position\n\t     */\n\t    withPosition(rows, branchesOrder, commit) {\n\t        const row = rows.getRowOf(commit.hash);\n\t        const maxRow = rows.getMaxRow();\n\t        const order = branchesOrder.get(commit.branchToDisplay);\n\t        switch (this.orientation) {\n\t            default:\n\t                return commit.setPosition({\n\t                    x: this.initCommitOffsetX + this.template.branch.spacing * order,\n\t                    y: this.initCommitOffsetY +\n\t                        this.template.commit.spacing * (maxRow - row),\n\t                });\n\t            case orientation.Orientation.VerticalReverse:\n\t                return commit.setPosition({\n\t                    x: this.initCommitOffsetX + this.template.branch.spacing * order,\n\t                    y: this.initCommitOffsetY + this.template.commit.spacing * row,\n\t                });\n\t            case orientation.Orientation.Horizontal:\n\t                return commit.setPosition({\n\t                    x: this.initCommitOffsetX + this.template.commit.spacing * row,\n\t                    y: this.initCommitOffsetY + this.template.branch.spacing * order,\n\t                });\n\t            case orientation.Orientation.HorizontalReverse:\n\t                return commit.setPosition({\n\t                    x: this.initCommitOffsetX +\n\t                        this.template.commit.spacing * (maxRow - row),\n\t                    y: this.initCommitOffsetY + this.template.branch.spacing * order,\n\t                });\n\t        }\n\t    }\n\t    /**\n\t     * Return the default color for given branch.\n\t     *\n\t     * @param branchesOrder Computed order of branches\n\t     * @param branchName Name of the branch\n\t     */\n\t    getBranchDefaultColor(branchesOrder, branchName) {\n\t        return branchesOrder.getColorOf(branchName);\n\t    }\n\t    /**\n\t     * Tell each listener something new happened.\n\t     * E.g. a rendering library will know it needs to re-render the graph.\n\t     */\n\t    next() {\n\t        if (this.nextTimeoutId) {\n\t            window.clearTimeout(this.nextTimeoutId);\n\t        }\n\t        // Use setTimeout() with `0` to debounce call to next tick.\n\t        this.nextTimeoutId = window.setTimeout(() => {\n\t            this.listeners.forEach((listener) => listener(this.getRenderedData()));\n\t        }, 0);\n\t    }\n\t}\n\texports.GitgraphCore = GitgraphCore;\n\n\t});\n\n\tunwrapExports(gitgraph);\n\tvar gitgraph_1 = gitgraph.GitgraphCore;\n\n\tvar lib = createCommonjsModule(function (module, exports) {\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\n\texports.GitgraphCore = gitgraph.GitgraphCore;\n\n\texports.Mode = mode.Mode;\n\n\texports.GitgraphUserApi = gitgraphUserApi.GitgraphUserApi;\n\n\texports.BranchUserApi = branchUserApi.BranchUserApi;\n\n\texports.Branch = branch.Branch;\n\n\texports.Commit = commit.Commit;\n\n\texports.Tag = tag.Tag;\n\n\texports.Refs = refs.Refs;\n\n\texports.MergeStyle = template.MergeStyle;\n\texports.TemplateName = template.TemplateName;\n\texports.templateExtend = template.templateExtend;\n\n\texports.Orientation = orientation.Orientation;\n\n\texports.toSvgPath = branchesPaths.toSvgPath;\n\n\texports.arrowSvgPath = utils.arrowSvgPath;\n\n\t});\n\n\tunwrapExports(lib);\n\tvar lib_1 = lib.GitgraphCore;\n\tvar lib_2 = lib.Mode;\n\tvar lib_3 = lib.GitgraphUserApi;\n\tvar lib_4 = lib.BranchUserApi;\n\tvar lib_5 = lib.Branch;\n\tvar lib_6 = lib.Commit;\n\tvar lib_7 = lib.Tag;\n\tvar lib_8 = lib.Refs;\n\tvar lib_9 = lib.MergeStyle;\n\tvar lib_10 = lib.TemplateName;\n\tvar lib_11 = lib.templateExtend;\n\tvar lib_12 = lib.Orientation;\n\tvar lib_13 = lib.toSvgPath;\n\tvar lib_14 = lib.arrowSvgPath;\n\n\tvar SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\n\tfunction createSvg(options) {\n\t    var svg = document.createElementNS(SVG_NAMESPACE, \"svg\");\n\t    if (!options)\n\t        return svg;\n\t    if (options.children) {\n\t        options.children.forEach(function (child) { return svg.appendChild(child); });\n\t    }\n\t    if (options.viewBox) {\n\t        svg.setAttribute(\"viewBox\", options.viewBox);\n\t    }\n\t    if (options.height) {\n\t        svg.setAttribute(\"height\", options.height.toString());\n\t    }\n\t    if (options.width) {\n\t        svg.setAttribute(\"width\", options.width.toString());\n\t    }\n\t    return svg;\n\t}\n\tfunction createG(options) {\n\t    var g = document.createElementNS(SVG_NAMESPACE, \"g\");\n\t    options.children.forEach(function (child) { return child && g.appendChild(child); });\n\t    if (options.translate) {\n\t        g.setAttribute(\"transform\", \"translate(\" + options.translate.x + \", \" + options.translate.y + \")\");\n\t    }\n\t    if (options.fill) {\n\t        g.setAttribute(\"fill\", options.fill);\n\t    }\n\t    if (options.stroke) {\n\t        g.setAttribute(\"stroke\", options.stroke);\n\t    }\n\t    if (options.strokeWidth) {\n\t        g.setAttribute(\"stroke-width\", options.strokeWidth.toString());\n\t    }\n\t    if (options.onClick) {\n\t        g.addEventListener(\"click\", options.onClick);\n\t    }\n\t    if (options.onMouseOver) {\n\t        g.addEventListener(\"mouseover\", options.onMouseOver);\n\t    }\n\t    if (options.onMouseOut) {\n\t        g.addEventListener(\"mouseout\", options.onMouseOut);\n\t    }\n\t    return g;\n\t}\n\tfunction createText(options) {\n\t    var text = document.createElementNS(SVG_NAMESPACE, \"text\");\n\t    text.setAttribute(\"alignment-baseline\", \"central\");\n\t    text.setAttribute(\"dominant-baseline\", \"central\");\n\t    text.textContent = options.content;\n\t    if (options.fill) {\n\t        text.setAttribute(\"fill\", options.fill);\n\t    }\n\t    if (options.font) {\n\t        text.setAttribute(\"style\", \"font: \" + options.font);\n\t    }\n\t    if (options.anchor) {\n\t        text.setAttribute(\"text-anchor\", options.anchor);\n\t    }\n\t    if (options.translate) {\n\t        text.setAttribute(\"x\", options.translate.x.toString());\n\t        text.setAttribute(\"y\", options.translate.y.toString());\n\t    }\n\t    if (options.onClick) {\n\t        text.addEventListener(\"click\", options.onClick);\n\t    }\n\t    return text;\n\t}\n\tfunction createCircle(options) {\n\t    var circle = document.createElementNS(SVG_NAMESPACE, \"circle\");\n\t    circle.setAttribute(\"cx\", options.radius.toString());\n\t    circle.setAttribute(\"cy\", options.radius.toString());\n\t    circle.setAttribute(\"r\", options.radius.toString());\n\t    if (options.id) {\n\t        circle.setAttribute(\"id\", options.id);\n\t    }\n\t    if (options.fill) {\n\t        circle.setAttribute(\"fill\", options.fill);\n\t    }\n\t    return circle;\n\t}\n\tfunction createRect(options) {\n\t    var rect = document.createElementNS(SVG_NAMESPACE, \"rect\");\n\t    rect.setAttribute(\"width\", options.width.toString());\n\t    rect.setAttribute(\"height\", options.height.toString());\n\t    if (options.borderRadius) {\n\t        rect.setAttribute(\"rx\", options.borderRadius.toString());\n\t    }\n\t    if (options.fill) {\n\t        rect.setAttribute(\"fill\", options.fill || \"transparent\");\n\t    }\n\t    if (options.stroke) {\n\t        rect.setAttribute(\"stroke\", options.stroke);\n\t    }\n\t    return rect;\n\t}\n\tfunction createPath(options) {\n\t    var path = document.createElementNS(SVG_NAMESPACE, \"path\");\n\t    path.setAttribute(\"d\", options.d);\n\t    if (options.fill) {\n\t        path.setAttribute(\"fill\", options.fill);\n\t    }\n\t    if (options.stroke) {\n\t        path.setAttribute(\"stroke\", options.stroke);\n\t    }\n\t    if (options.strokeWidth) {\n\t        path.setAttribute(\"stroke-width\", options.strokeWidth.toString());\n\t    }\n\t    if (options.translate) {\n\t        path.setAttribute(\"transform\", \"translate(\" + options.translate.x + \", \" + options.translate.y + \")\");\n\t    }\n\t    return path;\n\t}\n\tfunction createUse(href) {\n\t    var use = document.createElementNS(SVG_NAMESPACE, \"use\");\n\t    use.setAttribute(\"href\", \"#\" + href);\n\t    // xlink:href is deprecated in SVG2, but we keep it for retro-compatibility\n\t    // => https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use#Browser_compatibility\n\t    use.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\", \"#\" + href);\n\t    return use;\n\t}\n\tfunction createClipPath() {\n\t    return document.createElementNS(SVG_NAMESPACE, \"clipPath\");\n\t}\n\tfunction createDefs(children) {\n\t    var defs = document.createElementNS(SVG_NAMESPACE, \"defs\");\n\t    children.forEach(function (child) { return defs.appendChild(child); });\n\t    return defs;\n\t}\n\tfunction createForeignObject(options) {\n\t    var result = document.createElementNS(SVG_NAMESPACE, \"foreignObject\");\n\t    result.setAttribute(\"width\", options.width.toString());\n\t    if (options.translate) {\n\t        result.setAttribute(\"x\", options.translate.x.toString());\n\t        result.setAttribute(\"y\", options.translate.y.toString());\n\t    }\n\t    var p = document.createElement(\"p\");\n\t    p.textContent = options.content;\n\t    result.appendChild(p);\n\t    return result;\n\t}\n\n\tvar PADDING_X = 10;\n\tvar PADDING_Y = 5;\n\tfunction createBranchLabel(branch, commit) {\n\t    var rect = createRect({\n\t        width: 0,\n\t        height: 0,\n\t        borderRadius: branch.style.label.borderRadius,\n\t        stroke: branch.style.label.strokeColor || commit.style.color,\n\t        fill: branch.style.label.bgColor,\n\t    });\n\t    var text = createText({\n\t        content: branch.name,\n\t        translate: {\n\t            x: PADDING_X,\n\t            y: 0,\n\t        },\n\t        font: branch.style.label.font,\n\t        fill: branch.style.label.color || commit.style.color,\n\t    });\n\t    var branchLabel = createG({ children: [rect] });\n\t    var observer = new MutationObserver(function () {\n\t        var _a = text.getBBox(), height = _a.height, width = _a.width;\n\t        var boxWidth = width + 2 * PADDING_X;\n\t        var boxHeight = height + 2 * PADDING_Y;\n\t        // Ideally, it would be great to refactor these behavior into SVG elements.\n\t        rect.setAttribute(\"width\", boxWidth.toString());\n\t        rect.setAttribute(\"height\", boxHeight.toString());\n\t        text.setAttribute(\"y\", (boxHeight / 2).toString());\n\t    });\n\t    observer.observe(branchLabel, {\n\t        attributes: false,\n\t        subtree: false,\n\t        childList: true,\n\t    });\n\t    // Add text after observer is set up => react based on text size.\n\t    // We might refactor it by including `onChildrenUpdate()` to `createG()`.\n\t    branchLabel.appendChild(text);\n\t    return branchLabel;\n\t}\n\n\tvar PADDING_X$1 = 10;\n\tvar PADDING_Y$1 = 5;\n\tfunction createTag(tag) {\n\t    var path = createPath({\n\t        d: \"\",\n\t        fill: tag.style.bgColor,\n\t        stroke: tag.style.strokeColor,\n\t    });\n\t    var text = createText({\n\t        content: tag.name,\n\t        fill: tag.style.color,\n\t        font: tag.style.font,\n\t        translate: { x: 0, y: 0 },\n\t    });\n\t    var result = createG({ children: [path] });\n\t    var offset = tag.style.pointerWidth;\n\t    var observer = new MutationObserver(function () {\n\t        var _a = text.getBBox(), height = _a.height, width = _a.width;\n\t        if (height === 0 || width === 0)\n\t            return;\n\t        var radius = tag.style.borderRadius;\n\t        var boxWidth = offset + width + 2 * PADDING_X$1;\n\t        var boxHeight = height + 2 * PADDING_Y$1;\n\t        var pathD = [\n\t            \"M 0,0\",\n\t            \"L \" + offset + \",\" + boxHeight / 2,\n\t            \"V \" + boxHeight / 2,\n\t            \"Q \" + offset + \",\" + boxHeight / 2 + \" \" + (offset + radius) + \",\" + boxHeight / 2,\n\t            \"H \" + (boxWidth - radius),\n\t            \"Q \" + boxWidth + \",\" + boxHeight / 2 + \" \" + boxWidth + \",\" + (boxHeight / 2 - radius),\n\t            \"V -\" + (boxHeight / 2 - radius),\n\t            \"Q \" + boxWidth + \",-\" + boxHeight / 2 + \" \" + (boxWidth - radius) + \",-\" + boxHeight / 2,\n\t            \"H \" + (offset + radius),\n\t            \"Q \" + offset + \",-\" + boxHeight / 2 + \" \" + offset + \",-\" + boxHeight / 2,\n\t            \"V -\" + boxHeight / 2,\n\t            \"z\",\n\t        ].join(\" \");\n\t        // Ideally, it would be great to refactor these behavior into SVG elements.\n\t        path.setAttribute(\"d\", pathD.toString());\n\t        text.setAttribute(\"x\", (offset + PADDING_X$1).toString());\n\t    });\n\t    observer.observe(result, {\n\t        attributes: false,\n\t        subtree: false,\n\t        childList: true,\n\t    });\n\t    // Add text after observer is set up => react based on text size.\n\t    // We might refactor it by including `onChildrenUpdate()` to `createG()`.\n\t    result.appendChild(text);\n\t    return result;\n\t}\n\n\tvar PADDING = 10;\n\tvar OFFSET = 10;\n\tfunction createTooltip(commit) {\n\t    var path = createPath({ d: \"\", fill: \"#EEE\" });\n\t    var text = createText({\n\t        translate: { x: OFFSET + PADDING, y: 0 },\n\t        content: commit.hashAbbrev + \" - \" + commit.subject,\n\t        fill: \"#333\",\n\t    });\n\t    var commitSize = commit.style.dot.size * 2;\n\t    var tooltip = createG({\n\t        translate: { x: commitSize, y: commitSize / 2 },\n\t        children: [path],\n\t    });\n\t    var observer = new MutationObserver(function () {\n\t        var width = text.getBBox().width;\n\t        var radius = 5;\n\t        var boxHeight = 50;\n\t        var boxWidth = OFFSET + width + 2 * PADDING;\n\t        var pathD = [\n\t            \"M 0,0\",\n\t            \"L \" + OFFSET + \",\" + OFFSET,\n\t            \"V \" + (boxHeight / 2 - radius),\n\t            \"Q \" + OFFSET + \",\" + boxHeight / 2 + \" \" + (OFFSET + radius) + \",\" + boxHeight / 2,\n\t            \"H \" + (boxWidth - radius),\n\t            \"Q \" + boxWidth + \",\" + boxHeight / 2 + \" \" + boxWidth + \",\" + (boxHeight / 2 - radius),\n\t            \"V -\" + (boxHeight / 2 - radius),\n\t            \"Q \" + boxWidth + \",-\" + boxHeight / 2 + \" \" + (boxWidth - radius) + \",-\" + boxHeight / 2,\n\t            \"H \" + (OFFSET + radius),\n\t            \"Q \" + OFFSET + \",-\" + boxHeight / 2 + \" \" + OFFSET + \",-\" + (boxHeight / 2 - radius),\n\t            \"V -\" + OFFSET,\n\t            \"z\",\n\t        ].join(\" \");\n\t        // Ideally, it would be great to refactor these behavior into SVG elements.\n\t        // rect.setAttribute(\"width\", boxWidth.toString());\n\t        path.setAttribute(\"d\", pathD.toString());\n\t    });\n\t    observer.observe(tooltip, {\n\t        attributes: false,\n\t        subtree: false,\n\t        childList: true,\n\t    });\n\t    tooltip.appendChild(text);\n\t    return tooltip;\n\t}\n\n\tfunction createGitgraph(graphContainer, options) {\n\t    var commitsElements = {};\n\t    // Store a map to replace commits y with the correct value,\n\t    // including the message offset. Allows custom, flexible message height.\n\t    // E.g. {20: 30} means for commit: y=20 -> y=30\n\t    // Offset should be computed when graph is rendered (componentDidUpdate).\n\t    var commitYWithOffsets = {};\n\t    var shouldRecomputeOffsets = false;\n\t    var lastData;\n\t    var $commits;\n\t    var commitMessagesX = 0;\n\t    var $tooltip = null;\n\t    // Create an `svg` context in which we'll render the graph.\n\t    var svg = createSvg();\n\t    adaptSvgOnUpdate();\n\t    graphContainer.appendChild(svg);\n\t    // React on gitgraph updates to re-render the graph.\n\t    var gitgraph = new lib_1(options);\n\t    gitgraph.subscribe(function (data) {\n\t        shouldRecomputeOffsets = true;\n\t        render(data);\n\t    });\n\t    // Return usable API for end-user.\n\t    return gitgraph.getUserApi();\n\t    function render(data) {\n\t        // Reset before new rendering to flush previous state.\n\t        commitsElements = {};\n\t        var commits = data.commits, branchesPaths = data.branchesPaths;\n\t        commitMessagesX = data.commitMessagesX;\n\t        // Store data so we can re-render after offsets are computed.\n\t        lastData = data;\n\t        // Store $commits so we can compute offsets from actual height.\n\t        $commits = renderCommits(commits);\n\t        // Reset SVG with new content.\n\t        svg.innerHTML = \"\";\n\t        svg.appendChild(createG({\n\t            // Translate graph left => left-most branch label is not cropped (horizontal)\n\t            // Translate graph down => top-most commit tooltip is not cropped\n\t            translate: { x: PADDING_X, y: PADDING },\n\t            children: [renderBranchesPaths(branchesPaths), $commits],\n\t        }));\n\t    }\n\t    function adaptSvgOnUpdate() {\n\t        var observer = new MutationObserver(function () {\n\t            if (shouldRecomputeOffsets) {\n\t                shouldRecomputeOffsets = false;\n\t                computeOffsets();\n\t                render(lastData);\n\t            }\n\t            else {\n\t                positionCommitsElements();\n\t                adaptGraphDimensions();\n\t            }\n\t        });\n\t        observer.observe(svg, {\n\t            attributes: false,\n\t            // Listen to subtree changes to react when we append the tooltip.\n\t            subtree: true,\n\t            childList: true,\n\t        });\n\t        function computeOffsets() {\n\t            var commits = Array.from($commits.children);\n\t            var totalOffsetY = 0;\n\t            // In VerticalReverse orientation, commits are in the same order in the DOM.\n\t            var orientedCommits = gitgraph.orientation === lib_12.VerticalReverse\n\t                ? commits\n\t                : commits.reverse();\n\t            commitYWithOffsets = orientedCommits.reduce(function (newOffsets, commit) {\n\t                var commitY = parseInt(commit\n\t                    .getAttribute(\"transform\")\n\t                    .split(\",\")[1]\n\t                    .slice(0, -1), 10);\n\t                var firstForeignObject = commit.getElementsByTagName(\"foreignObject\")[0];\n\t                var customHtmlMessage = firstForeignObject && firstForeignObject.firstElementChild;\n\t                newOffsets[commitY] = commitY + totalOffsetY;\n\t                // Increment total offset after setting the offset\n\t                // => offset next commits accordingly.\n\t                totalOffsetY += getMessageHeight(customHtmlMessage);\n\t                return newOffsets;\n\t            }, {});\n\t        }\n\t        function positionCommitsElements() {\n\t            if (gitgraph.isHorizontal) {\n\t                // Elements don't appear on horizontal mode, yet.\n\t                return;\n\t            }\n\t            var padding = 10;\n\t            // Ensure commits elements (branch labels, message…) are well positionned.\n\t            // It can't be done at render time since elements size is dynamic.\n\t            Object.keys(commitsElements).forEach(function (commitHash) {\n\t                var _a = commitsElements[commitHash], branchLabel = _a.branchLabel, tags = _a.tags, message = _a.message;\n\t                // We'll store X position progressively and translate elements.\n\t                var x = commitMessagesX;\n\t                if (branchLabel) {\n\t                    moveElement(branchLabel, x);\n\t                    // BBox width misses box padding\n\t                    // => they are set later, on branch label update.\n\t                    // We would need to make branch label update happen before to solve it.\n\t                    var branchLabelWidth = branchLabel.getBBox().width + 2 * PADDING_X;\n\t                    x += branchLabelWidth + padding;\n\t                }\n\t                tags.forEach(function (tag) {\n\t                    moveElement(tag, x);\n\t                    // BBox width misses box padding and offset\n\t                    // => they are set later, on tag update.\n\t                    // We would need to make tag update happen before to solve it.\n\t                    var offset = parseFloat(tag.getAttribute(\"data-offset\") || \"0\");\n\t                    var tagWidth = tag.getBBox().width + 2 * PADDING_X$1 + offset;\n\t                    x += tagWidth + padding;\n\t                });\n\t                if (message) {\n\t                    moveElement(message, x);\n\t                }\n\t            });\n\t        }\n\t        function adaptGraphDimensions() {\n\t            var _a = svg.getBBox(), height = _a.height, width = _a.width;\n\t            // FIXME: In horizontal mode, we mimic @gitgraph/react behavior\n\t            // => it gets re-rendered after offsets are computed\n\t            // => it applies paddings twice!\n\t            //\n\t            // It works… by chance. Technically, we should compute what would\n\t            // *actually* go beyond the computed limits of the graph.\n\t            var horizontalCustomOffset = 50;\n\t            var widthOffset = gitgraph.isHorizontal\n\t                ? horizontalCustomOffset\n\t                : // Add `TOOLTIP_PADDING` so we don't crop the tooltip text.\n\t                    // Add `BRANCH_LABEL_PADDING_X` so we don't cut branch label.\n\t                    PADDING_X + PADDING;\n\t            var heightOffset = gitgraph.isHorizontal\n\t                ? horizontalCustomOffset\n\t                : // Add `TOOLTIP_PADDING` so we don't crop tooltip text\n\t                    // Add `BRANCH_LABEL_PADDING_Y` so we don't crop branch label.\n\t                    PADDING_Y + PADDING;\n\t            svg.setAttribute(\"width\", (width + widthOffset).toString());\n\t            svg.setAttribute(\"height\", (height + heightOffset).toString());\n\t        }\n\t    }\n\t    function moveElement(target, x) {\n\t        var transform = target.getAttribute(\"transform\") || \"translate(0, 0)\";\n\t        target.setAttribute(\"transform\", transform.replace(/translate\\(([\\d\\.]+),/, \"translate(\" + x + \",\"));\n\t    }\n\t    function renderBranchesPaths(branchesPaths) {\n\t        var offset = gitgraph.template.commit.dot.size;\n\t        var isBezier = gitgraph.template.branch.mergeStyle === lib_9.Bezier;\n\t        var paths = Array.from(branchesPaths).map(function (_a) {\n\t            var branch = _a[0], coordinates = _a[1];\n\t            return createPath({\n\t                d: lib_13(coordinates.map(function (coordinate) { return coordinate.map(getWithCommitOffset); }), isBezier, gitgraph.isVertical),\n\t                fill: \"transparent\",\n\t                stroke: branch.computedColor || \"\",\n\t                strokeWidth: branch.style.lineWidth,\n\t                translate: {\n\t                    x: offset,\n\t                    y: offset,\n\t                },\n\t            });\n\t        });\n\t        return createG({ children: paths });\n\t    }\n\t    function renderCommits(commits) {\n\t        return createG({ children: commits.map(renderCommit) });\n\t        function renderCommit(commit) {\n\t            var _a = getWithCommitOffset(commit), x = _a.x, y = _a.y;\n\t            return createG({\n\t                translate: { x: x, y: y },\n\t                children: [\n\t                    renderDot(commit)\n\t                ].concat(renderArrows(commit), [\n\t                    createG({\n\t                        translate: { x: -x, y: 0 },\n\t                        children: [\n\t                            renderMessage(commit)\n\t                        ].concat(renderBranchLabels(commit), renderTags(commit)),\n\t                    }),\n\t                ]),\n\t            });\n\t        }\n\t        function renderArrows(commit) {\n\t            if (!gitgraph.template.arrow.size) {\n\t                return [null];\n\t            }\n\t            var commitRadius = commit.style.dot.size;\n\t            return commit.parents.map(function (parentHash) {\n\t                var parent = commits.find(function (_a) {\n\t                    var hash = _a.hash;\n\t                    return hash === parentHash;\n\t                });\n\t                if (!parent)\n\t                    return null;\n\t                // Starting point, relative to commit\n\t                var origin = gitgraph.reverseArrow\n\t                    ? {\n\t                        x: commitRadius + (parent.x - commit.x),\n\t                        y: commitRadius + (parent.y - commit.y),\n\t                    }\n\t                    : { x: commitRadius, y: commitRadius };\n\t                var path = createPath({\n\t                    d: lib_14(gitgraph, parent, commit),\n\t                    fill: gitgraph.template.arrow.color || \"\",\n\t                });\n\t                return createG({ translate: origin, children: [path] });\n\t            });\n\t        }\n\t    }\n\t    function renderMessage(commit) {\n\t        if (!commit.style.message.display) {\n\t            return null;\n\t        }\n\t        var message;\n\t        if (commit.renderMessage) {\n\t            message = createG({ children: [] });\n\t            // Add message after observer is set up => react based on body height.\n\t            // We might refactor it by including `onChildrenUpdate()` to `createG()`.\n\t            adaptMessageBodyHeight(message);\n\t            message.appendChild(commit.renderMessage(commit));\n\t            setMessageRef(commit, message);\n\t            return message;\n\t        }\n\t        var text = createText({\n\t            content: commit.message,\n\t            fill: commit.style.message.color || \"\",\n\t            font: commit.style.message.font,\n\t            onClick: commit.onMessageClick,\n\t        });\n\t        message = createG({\n\t            translate: { x: 0, y: commit.style.dot.size },\n\t            children: [text],\n\t        });\n\t        if (commit.body) {\n\t            var body = createForeignObject({\n\t                width: 600,\n\t                translate: { x: 10, y: 0 },\n\t                content: commit.body,\n\t            });\n\t            // Add message after observer is set up => react based on body height.\n\t            // We might refactor it by including `onChildrenUpdate()` to `createG()`.\n\t            adaptMessageBodyHeight(message);\n\t            message.appendChild(body);\n\t        }\n\t        setMessageRef(commit, message);\n\t        return message;\n\t    }\n\t    function adaptMessageBodyHeight(message) {\n\t        var observer = new MutationObserver(function (mutations) {\n\t            mutations.forEach(function (_a) {\n\t                var target = _a.target;\n\t                return setChildrenForeignObjectHeight(target);\n\t            });\n\t        });\n\t        observer.observe(message, {\n\t            attributes: false,\n\t            subtree: false,\n\t            childList: true,\n\t        });\n\t        function setChildrenForeignObjectHeight(node) {\n\t            if (node.nodeName === \"foreignObject\") {\n\t                // We have to access the first child's parentElement to retrieve\n\t                // the Element instead of the Node => we can compute dimensions.\n\t                var foreignObject = node.firstChild && node.firstChild.parentElement;\n\t                if (!foreignObject)\n\t                    return;\n\t                // Force the height of the foreignObject (browser issue)\n\t                foreignObject.setAttribute(\"height\", getMessageHeight(foreignObject.firstElementChild).toString());\n\t            }\n\t            node.childNodes.forEach(setChildrenForeignObjectHeight);\n\t        }\n\t    }\n\t    function renderBranchLabels(commit) {\n\t        // @gitgraph/core could compute branch labels into commits directly.\n\t        // That will make it easier to retrieve them, just like tags.\n\t        var branches = Array.from(gitgraph.branches.values());\n\t        return branches.map(function (branch) {\n\t            if (!branch.style.label.display)\n\t                return null;\n\t            if (!gitgraph.branchLabelOnEveryCommit) {\n\t                var commitHash = gitgraph.refs.getCommit(branch.name);\n\t                if (commit.hash !== commitHash)\n\t                    return null;\n\t            }\n\t            // For the moment, we don't handle multiple branch labels.\n\t            // To do so, we'd need to reposition each of them appropriately.\n\t            if (commit.branchToDisplay !== branch.name)\n\t                return null;\n\t            var branchLabel = branch.renderLabel\n\t                ? branch.renderLabel(branch)\n\t                : createBranchLabel(branch, commit);\n\t            var branchLabelContainer;\n\t            if (gitgraph.isVertical) {\n\t                branchLabelContainer = createG({\n\t                    children: [branchLabel],\n\t                });\n\t            }\n\t            else {\n\t                var commitDotSize = commit.style.dot.size * 2;\n\t                var horizontalMarginTop = 10;\n\t                branchLabelContainer = createG({\n\t                    translate: { x: commit.x, y: commitDotSize + horizontalMarginTop },\n\t                    children: [branchLabel],\n\t                });\n\t            }\n\t            setBranchLabelRef(commit, branchLabelContainer);\n\t            return branchLabelContainer;\n\t        });\n\t    }\n\t    function renderTags(commit) {\n\t        if (!commit.tags)\n\t            return [];\n\t        if (gitgraph.isHorizontal)\n\t            return [];\n\t        return commit.tags.map(function (tag) {\n\t            var tagElement = tag.render\n\t                ? tag.render(tag.name, tag.style)\n\t                : createTag(tag);\n\t            var tagContainer = createG({\n\t                translate: { x: 0, y: commit.style.dot.size },\n\t                children: [tagElement],\n\t            });\n\t            // `data-offset` is used to position tag element in `positionCommitsElements`.\n\t            // => because when it's executed, tag offsets are not resolved yet\n\t            tagContainer.setAttribute(\"data-offset\", tag.style.pointerWidth.toString());\n\t            setTagRef(commit, tagContainer);\n\t            return tagContainer;\n\t        });\n\t    }\n\t    function renderDot(commit) {\n\t        if (commit.renderDot) {\n\t            return commit.renderDot(commit);\n\t        }\n\t        /*\n\t        In order to handle strokes, we need to do some complex stuff here… 😅\n\t    \n\t        Problem: strokes are drawn inside & outside the circle.\n\t        But we want the stroke to be drawn inside only!\n\t    \n\t        The outside overlaps with other elements, as we expect the dot to have a fixed size. So we want to crop the outside part.\n\t    \n\t        Solution:\n\t        1. Create the circle in a <defs>\n\t        2. Define a clip path that references the circle\n\t        3. Use the clip path, adding the stroke.\n\t        4. Double stroke width as half of it will be clipped (the outside part).\n\t    \n\t        Ref.: https://stackoverflow.com/a/32162431/3911841\n\t    \n\t        P.S. there is a proposal for a stroke-alignment property,\n\t        but it's still a W3C Draft ¯\\_(ツ)_/¯\n\t        https://svgwg.org/specs/strokes/#SpecifyingStrokeAlignment\n\t      */\n\t        var circleId = commit.hash;\n\t        var circle = createCircle({\n\t            id: circleId,\n\t            radius: commit.style.dot.size,\n\t            fill: commit.style.dot.color || \"\",\n\t        });\n\t        var clipPathId = \"clip-\" + commit.hash;\n\t        var circleClipPath = createClipPath();\n\t        circleClipPath.setAttribute(\"id\", clipPathId);\n\t        circleClipPath.appendChild(createUse(circleId));\n\t        var useCirclePath = createUse(circleId);\n\t        useCirclePath.setAttribute(\"clip-path\", \"url(#\" + clipPathId + \")\");\n\t        useCirclePath.setAttribute(\"stroke\", commit.style.dot.strokeColor || \"\");\n\t        var strokeWidth = commit.style.dot.strokeWidth\n\t            ? commit.style.dot.strokeWidth * 2\n\t            : 0;\n\t        useCirclePath.setAttribute(\"stroke-width\", strokeWidth.toString());\n\t        var dotText = commit.dotText\n\t            ? createText({\n\t                content: commit.dotText,\n\t                font: commit.style.dot.font,\n\t                anchor: \"middle\",\n\t                translate: { x: commit.style.dot.size, y: commit.style.dot.size },\n\t            })\n\t            : null;\n\t        return createG({\n\t            onClick: commit.onClick,\n\t            onMouseOver: function () {\n\t                appendTooltipToGraph(commit);\n\t                commit.onMouseOver();\n\t            },\n\t            onMouseOut: function () {\n\t                if ($tooltip)\n\t                    $tooltip.remove();\n\t                commit.onMouseOut();\n\t            },\n\t            children: [createDefs([circle, circleClipPath]), useCirclePath, dotText],\n\t        });\n\t    }\n\t    function appendTooltipToGraph(commit) {\n\t        if (!svg.firstChild)\n\t            return;\n\t        if (gitgraph.isVertical && gitgraph.mode !== lib_2.Compact)\n\t            return;\n\t        if (gitgraph.isVertical && !commit.style.hasTooltipInCompactMode)\n\t            return;\n\t        var tooltip = commit.renderTooltip\n\t            ? commit.renderTooltip(commit)\n\t            : createTooltip(commit);\n\t        $tooltip = createG({\n\t            translate: getWithCommitOffset(commit),\n\t            children: [tooltip],\n\t        });\n\t        svg.firstChild.appendChild($tooltip);\n\t    }\n\t    function getWithCommitOffset(_a) {\n\t        var x = _a.x, y = _a.y;\n\t        return { x: x, y: commitYWithOffsets[y] || y };\n\t    }\n\t    function setBranchLabelRef(commit, branchLabels) {\n\t        if (!commitsElements[commit.hashAbbrev]) {\n\t            initCommitElements(commit);\n\t        }\n\t        commitsElements[commit.hashAbbrev].branchLabel = branchLabels;\n\t    }\n\t    function setMessageRef(commit, message) {\n\t        if (!commitsElements[commit.hashAbbrev]) {\n\t            initCommitElements(commit);\n\t        }\n\t        commitsElements[commit.hashAbbrev].message = message;\n\t    }\n\t    function setTagRef(commit, tag) {\n\t        if (!commitsElements[commit.hashAbbrev]) {\n\t            initCommitElements(commit);\n\t        }\n\t        commitsElements[commit.hashAbbrev].tags.push(tag);\n\t    }\n\t    function initCommitElements(commit) {\n\t        commitsElements[commit.hashAbbrev] = {\n\t            branchLabel: null,\n\t            tags: [],\n\t            message: null,\n\t        };\n\t    }\n\t}\n\tfunction getMessageHeight(message) {\n\t    var messageHeight = 0;\n\t    if (message) {\n\t        var height = message.getBoundingClientRect().height;\n\t        var marginTopInPx = window.getComputedStyle(message).marginTop || \"0px\";\n\t        var marginTop = parseInt(marginTopInPx.replace(\"px\", \"\"), 10);\n\t        messageHeight = height + marginTop;\n\t    }\n\t    return messageHeight;\n\t}\n\n\texports.MergeStyle = lib_9;\n\texports.Mode = lib_2;\n\texports.Orientation = lib_12;\n\texports.TemplateName = lib_10;\n\texports.createGitgraph = createGitgraph;\n\texports.templateExtend = lib_11;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","// Extracted from `gitgraph.ts` because it caused `utils` tests to fail\n// because of circular dependency between `utils` and `template`.\n// It's not clear why (the circular dependency still exist) but `Orientation`\n// was the only one causing issue. Maybe because it's an enum?\n\nexport enum Orientation {\n  VerticalReverse = \"vertical-reverse\",\n  Horizontal = \"horizontal\",\n  HorizontalReverse = \"horizontal-reverse\",\n}\n","import { Commit } from \"./commit\";\nimport { GitgraphCore } from \"./gitgraph\";\nimport { Orientation } from \"./orientation\";\nimport { Coordinate } from \"./branches-paths\";\n\nexport {\n  Omit,\n  NonMatchingPropNames,\n  NonMatchingProp,\n  booleanOptionOr,\n  numberOptionOr,\n  pick,\n  debug,\n  isUndefined,\n  withoutUndefinedKeys,\n  arrowSvgPath,\n};\n\n/**\n * Omit some keys from an original type.\n */\ntype Omit<T, K> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Get all property names not matching a type.\n *\n * @ref http://tycho01.github.io/typical/modules/_object_nonmatchingpropsnames_.html\n */\ntype NonMatchingPropNames<T, X> = {\n  [K in keyof T]: T[K] extends X ? never : K\n}[keyof T];\n\n/**\n * Get all properties with names not matching a type.\n *\n * @ref http://tycho01.github.io/typical/modules/_object_nonmatchingprops_.html\n */\ntype NonMatchingProp<T, X> = Pick<T, NonMatchingPropNames<T, X>>;\n\n/**\n * Provide a default value to a boolean.\n * @param value\n * @param defaultValue\n */\nfunction booleanOptionOr(value: any, defaultValue: boolean): boolean {\n  return typeof value === \"boolean\" ? value : defaultValue;\n}\n\n/**\n * Provide a default value to a number.\n * @param value\n * @param defaultValue\n */\nfunction numberOptionOr(value: any, defaultValue: number): number {\n  return typeof value === \"number\" ? value : defaultValue;\n}\n\n/**\n * Creates an object composed of the picked object properties.\n * @param obj The source object\n * @param paths The property paths to pick\n */\nfunction pick<T, K extends keyof T>(obj: T, paths: K[]): Pick<T, K> {\n  return {\n    ...paths.reduce((mem, key) => ({ ...mem, [key]: obj[key] }), {}),\n  } as Pick<T, K>;\n}\n\n/**\n * Print a light version of commits into the console.\n * @param commits List of commits\n * @param paths The property paths to pick\n */\nfunction debug<TNode = SVGElement>(\n  commits: Array<Commit<TNode>>,\n  paths: Array<keyof Commit<TNode>>,\n): void {\n  // tslint:disable-next-line:no-console\n  console.log(\n    JSON.stringify(commits.map((commit) => pick(commit, paths)), null, 2),\n  );\n}\n\n/**\n * Return true if is undefined.\n *\n * @param obj\n */\nfunction isUndefined(obj: any): obj is undefined {\n  return obj === undefined;\n}\n\n/**\n * Return a version of the object without any undefined keys.\n *\n * @param obj\n */\nfunction withoutUndefinedKeys<T extends object>(\n  obj: T = {} as T,\n): NonMatchingProp<T, undefined> {\n  return (Object.keys(obj) as [keyof T]).reduce<T>(\n    (mem: any, key) =>\n      isUndefined(obj[key]) ? mem : { ...mem, [key]: obj[key] },\n    {} as T,\n  );\n}\n\n/**\n * Return a string ready to use in `svg.path.d` to draw an arrow from params.\n *\n * @param graph Graph context\n * @param parent Parent commit of the target commit\n * @param commit Target commit\n */\nfunction arrowSvgPath<TNode = SVGElement>(\n  graph: GitgraphCore<TNode>,\n  parent: Coordinate,\n  commit: Commit<TNode>,\n): string {\n  const commitRadius = commit.style.dot.size;\n  const size = graph.template.arrow.size!;\n  const h = commitRadius + graph.template.arrow.offset;\n\n  // Delta between left & right (radian)\n  const delta = Math.PI / 7;\n\n  // Alpha angle between parent & commit (radian)\n  const alpha = getAlpha(graph, parent, commit);\n\n  // Top\n  const x1 = h * Math.cos(alpha);\n  const y1 = h * Math.sin(alpha);\n\n  // Bottom right\n  const x2 = (h + size) * Math.cos(alpha - delta);\n  const y2 = (h + size) * Math.sin(alpha - delta);\n\n  // Bottom center\n  const x3 = (h + size / 2) * Math.cos(alpha);\n  const y3 = (h + size / 2) * Math.sin(alpha);\n\n  // Bottom left\n  const x4 = (h + size) * Math.cos(alpha + delta);\n  const y4 = (h + size) * Math.sin(alpha + delta);\n\n  return `M${x1},${y1} L${x2},${y2} Q${x3},${y3} ${x4},${y4} L${x4},${y4}`;\n}\n\nfunction getAlpha<TNode = SVGElement>(\n  graph: GitgraphCore<TNode>,\n  parent: Coordinate,\n  commit: Commit<TNode>,\n): number {\n  const deltaX = parent.x - commit.x;\n  const deltaY = parent.y - commit.y;\n  const commitSpacing = graph.template.commit.spacing;\n\n  let alphaY;\n  let alphaX;\n\n  // Angle usually start from previous commit Y position:\n  //\n  // o\n  // ↑ ↖ ︎\n  // o  |  <-- path is straight until last commit Y position\n  // ↑  o\n  // | ↗︎\n  // o\n  //\n  // So we can to default to commit spacing.\n  // For horizontal orientation => same with commit X position.\n  switch (graph.orientation) {\n    case Orientation.Horizontal:\n      alphaY = deltaY;\n      alphaX = -commitSpacing;\n      break;\n\n    case Orientation.HorizontalReverse:\n      alphaY = deltaY;\n      alphaX = commitSpacing;\n      break;\n\n    case Orientation.VerticalReverse:\n      alphaY = -commitSpacing;\n      alphaX = deltaX;\n      break;\n\n    default:\n      alphaY = commitSpacing;\n      alphaX = deltaX;\n      break;\n  }\n\n  // If commit is distant from its parent, there should be no angle.\n  //\n  //    o ︎\n  //    ↑  <-- arrow is like previous commit was on same X position\n  // o  |\n  // | /\n  // o\n  //\n  // For horizontal orientation => same with commit Y position.\n  if (graph.isVertical) {\n    if (Math.abs(deltaY) > commitSpacing) alphaX = 0;\n  } else {\n    if (Math.abs(deltaX) > commitSpacing) alphaY = 0;\n  }\n\n  if (graph.reverseArrow) {\n    alphaY *= -1;\n    alphaX *= -1;\n  }\n\n  return Math.atan2(alphaY, alphaX);\n}\n","import { booleanOptionOr, numberOptionOr } from \"./utils\";\n\nexport {\n  MergeStyle,\n  ArrowStyle,\n  BranchStyle,\n  CommitDotStyle,\n  CommitMessageStyle,\n  CommitStyleBase,\n  CommitStyle,\n  TemplateOptions,\n  Template,\n  TemplateName,\n  blackArrowTemplate,\n  metroTemplate,\n  templateExtend,\n  getTemplate,\n};\n\n/**\n * Branch merge style enum\n */\nenum MergeStyle {\n  Bezier = \"bezier\",\n  Straight = \"straight\",\n}\n\n/**\n * Arrow style\n */\ninterface ArrowStyle {\n  /**\n   * Arrow color\n   */\n  color: string | null;\n  /**\n   * Arrow size in pixel\n   */\n  size: number | null;\n  /**\n   * Arrow offset in pixel\n   */\n  offset: number;\n}\n\ntype ArrowStyleOptions = Partial<ArrowStyle>;\n\ninterface BranchStyle {\n  /**\n   * Branch color\n   */\n  color?: string;\n  /**\n   * Branch line width in pixel\n   */\n  lineWidth: number;\n  /**\n   * Branch merge style\n   */\n  mergeStyle: MergeStyle;\n  /**\n   * Space between branches\n   */\n  spacing: number;\n  /**\n   * Branch label style\n   */\n  label: BranchLabelStyleOptions;\n}\n\ntype BranchStyleOptions = Partial<BranchStyle>;\n\ninterface BranchLabelStyle {\n  /**\n   * Branch label visibility\n   */\n  display: boolean;\n  /**\n   * Branch label text color\n   */\n  color: string;\n  /**\n   * Branch label stroke color\n   */\n  strokeColor: string;\n  /**\n   * Branch label background color\n   */\n  bgColor: string;\n  /**\n   * Branch label font\n   */\n  font: string;\n  /**\n   * Branch label border radius\n   */\n  borderRadius: number;\n}\n\ntype BranchLabelStyleOptions = Partial<BranchLabelStyle>;\n\nexport interface TagStyle {\n  /**\n   * Tag text color\n   */\n  color: string;\n  /**\n   * Tag stroke color\n   */\n  strokeColor?: string;\n  /**\n   * Tag background color\n   */\n  bgColor?: string;\n  /**\n   * Tag font\n   */\n  font: string;\n  /**\n   * Tag border radius\n   */\n  borderRadius: number;\n  /**\n   * Width of the tag pointer\n   */\n  pointerWidth: number;\n}\n\ntype TagStyleOptions = Partial<TagStyle>;\n\ninterface CommitDotStyle {\n  /**\n   * Commit dot color\n   */\n  color?: string;\n  /**\n   * Commit dot size in pixel\n   */\n  size: number;\n  /**\n   * Commit dot stroke width\n   */\n  strokeWidth?: number;\n  /**\n   * Commit dot stroke color\n   */\n  strokeColor?: string;\n  /**\n   * Commit dot font\n   */\n  font: string;\n}\n\ntype CommitDotStyleOptions = Partial<CommitDotStyle>;\n\ninterface CommitMessageStyle {\n  /**\n   * Commit message color\n   */\n  color?: string;\n  /**\n   * Commit message display policy\n   */\n  display: boolean;\n  /**\n   * Commit message author display policy\n   */\n  displayAuthor: boolean;\n  /**\n   * Commit message hash display policy\n   */\n  displayHash: boolean;\n  /**\n   * Commit message font\n   */\n  font: string;\n}\n\ntype CommitMessageStyleOptions = Partial<CommitMessageStyle>;\n\ninterface CommitStyleBase {\n  /**\n   * Spacing between commits\n   */\n  spacing: number;\n  /**\n   * Commit color (dot & message)\n   */\n  color?: string;\n  /**\n   * Tooltips policy\n   */\n  hasTooltipInCompactMode: boolean;\n}\n\ninterface CommitStyle extends CommitStyleBase {\n  /**\n   * Commit message style\n   */\n  message: CommitMessageStyle;\n  /**\n   * Commit dot style\n   */\n  dot: CommitDotStyle;\n}\n\ninterface CommitStyleOptions extends Partial<CommitStyleBase> {\n  /**\n   * Commit message style\n   */\n  message?: CommitMessageStyleOptions;\n  /**\n   * Commit dot style\n   */\n  dot?: CommitDotStyleOptions;\n}\n\ninterface TemplateOptions {\n  /**\n   * Colors scheme: One color for each column\n   */\n  colors?: string[];\n  /**\n   * Arrow style\n   */\n  arrow?: ArrowStyleOptions;\n  /**\n   * Branch style\n   */\n  branch?: BranchStyleOptions;\n  /**\n   * Commit style\n   */\n  commit?: CommitStyleOptions;\n  /**\n   * Tag style\n   */\n  tag?: TagStyleOptions;\n}\n\nexport const DEFAULT_FONT = \"normal 12pt Calibri\";\n\n/**\n * Gitgraph template\n *\n * Set of design rules for the rendering.\n */\nclass Template {\n  /**\n   * Colors scheme: One color for each column\n   */\n  public colors: string[];\n  /**\n   * Arrow style\n   */\n  public arrow: ArrowStyle;\n  /**\n   * Branch style\n   */\n  public branch: BranchStyle;\n  /**\n   * Commit style\n   */\n  public commit: CommitStyle;\n  /**\n   * Tag style\n   */\n  public tag: TagStyleOptions;\n\n  constructor(options: TemplateOptions) {\n    // Options\n    options.branch = options.branch || {};\n    options.branch.label = options.branch.label || {};\n    options.arrow = options.arrow || {};\n    options.commit = options.commit || {};\n    options.commit.dot = options.commit.dot || {};\n    options.commit.message = options.commit.message || {};\n\n    // One color per column\n    this.colors = options.colors || [\"#000000\"];\n\n    // Branch style\n    this.branch = {\n      color: options.branch.color,\n      lineWidth: options.branch.lineWidth || 2,\n      mergeStyle: options.branch.mergeStyle || MergeStyle.Bezier,\n      spacing: numberOptionOr(options.branch.spacing, 20),\n      label: {\n        display: booleanOptionOr(options.branch.label.display, true),\n        color: options.branch.label.color || options.commit.color,\n        strokeColor: options.branch.label.strokeColor || options.commit.color,\n        bgColor: options.branch.label.bgColor || \"white\",\n        font:\n          options.branch.label.font ||\n          options.commit.message.font ||\n          DEFAULT_FONT,\n        borderRadius: numberOptionOr(options.branch.label.borderRadius, 10),\n      },\n    };\n\n    // Arrow style\n    this.arrow = {\n      size: options.arrow.size || null,\n      color: options.arrow.color || null,\n      offset: options.arrow.offset || 2,\n    };\n\n    // Commit style\n    this.commit = {\n      color: options.commit.color,\n      spacing: numberOptionOr(options.commit.spacing, 25),\n      hasTooltipInCompactMode: booleanOptionOr(\n        options.commit.hasTooltipInCompactMode,\n        true,\n      ),\n      dot: {\n        color: options.commit.dot.color || options.commit.color,\n        size: options.commit.dot.size || 3,\n        strokeWidth: numberOptionOr(options.commit.dot.strokeWidth, 0),\n        strokeColor: options.commit.dot.strokeColor,\n        font:\n          options.commit.dot.font ||\n          options.commit.message.font ||\n          \"normal 10pt Calibri\",\n      },\n      message: {\n        display: booleanOptionOr(options.commit.message.display, true),\n        displayAuthor: booleanOptionOr(\n          options.commit.message.displayAuthor,\n          true,\n        ),\n        displayHash: booleanOptionOr(options.commit.message.displayHash, true),\n        color: options.commit.message.color || options.commit.color,\n        font: options.commit.message.font || DEFAULT_FONT,\n      },\n    };\n\n    // Tag style\n    // This one is computed in the Tag instance. It needs Commit style\n    // that is partially computed at runtime (for colors).\n    this.tag = options.tag || {};\n  }\n}\n\n/**\n * Black arrow template\n */\nconst blackArrowTemplate = new Template({\n  colors: [\"#6963FF\", \"#47E8D4\", \"#6BDB52\", \"#E84BA5\", \"#FFA657\"],\n  branch: {\n    color: \"#000000\",\n    lineWidth: 4,\n    spacing: 50,\n    mergeStyle: MergeStyle.Straight,\n  },\n  commit: {\n    spacing: 60,\n    dot: {\n      size: 16,\n      strokeColor: \"#000000\",\n      strokeWidth: 4,\n    },\n    message: {\n      color: \"black\",\n    },\n  },\n  arrow: {\n    size: 16,\n    offset: -1.5,\n  },\n});\n\n/**\n * Metro template\n */\nconst metroTemplate = new Template({\n  colors: [\"#979797\", \"#008fb5\", \"#f1c109\"],\n  branch: {\n    lineWidth: 10,\n    spacing: 50,\n  },\n  commit: {\n    spacing: 80,\n    dot: {\n      size: 14,\n    },\n    message: {\n      font: \"normal 14pt Arial\",\n    },\n  },\n});\n\nenum TemplateName {\n  Metro = \"metro\",\n  BlackArrow = \"blackarrow\",\n}\n\n/**\n * Extend an existing template with new options.\n *\n * @param selectedTemplate Template to extend\n * @param options Template options\n */\nfunction templateExtend(\n  selectedTemplate: TemplateName,\n  options: TemplateOptions,\n): Template {\n  const template = getTemplate(selectedTemplate);\n\n  if (!options.branch) options.branch = {};\n  if (!options.commit) options.commit = {};\n\n  // This is tedious, but it seems acceptable so we don't need lodash\n  // as we want to keep bundlesize small.\n  return {\n    colors: options.colors || template.colors,\n    arrow: {\n      ...template.arrow,\n      ...options.arrow,\n    },\n    branch: {\n      ...template.branch,\n      ...options.branch,\n      label: {\n        ...template.branch.label,\n        ...options.branch.label,\n      },\n    },\n    commit: {\n      ...template.commit,\n      ...options.commit,\n      dot: {\n        ...template.commit.dot,\n        ...options.commit.dot,\n      },\n      message: {\n        ...template.commit.message,\n        ...options.commit.message,\n      },\n    },\n    tag: {\n      ...template.tag,\n      ...options.tag,\n    },\n  };\n}\n\n/**\n * Resolve the template to use regarding given `template` value.\n *\n * @param template Selected template name, or instance.\n */\nfunction getTemplate(template?: TemplateName | Template): Template {\n  if (!template) return metroTemplate;\n\n  if (typeof template === \"string\") {\n    return {\n      [TemplateName.BlackArrow]: blackArrowTemplate,\n      [TemplateName.Metro]: metroTemplate,\n    }[template];\n  }\n\n  return template as Template;\n}\n","import './main.css';\n\nimport { createGitgraph, Orientation, Mode, templateExtend} from \"@gitgraph/js\";\nimport { Template, TemplateName } from '@gitgraph/core/lib/template';\n\nconst graphContainer = document.getElementById(\"gitgraph\");\n\nconst gitgraph = createGitgraph(graphContainer, {\n  orientation: Orientation.VerticalReverse,\n  template: templateExtend(TemplateName.Metro, {\n    commit:{\n      message: {\n        displayAuthor: false,\n        displayBranch: true,\n        displayHash: false,\n        font: \"normal 12pt Arial\",\n      }\n    },\n  })\n});\n\nconst master = gitgraph.branch(\"master\");\nmaster\n  .commit(\"Init\")\n  .commit(\"Add README\")\n  .tag(\"v0.0.1\");\n\nconst newEpic = gitgraph.branch(\"ZAR-1000-epic\").commit(\"chore(build): ZAR-1000-epic\");\nconst newEpic2 = gitgraph.branch(\"ZAR-1000-epic2\").commit(\"chore(build): ZAR-1000-epic2\");\n\nconst task1 = newEpic\n  .branch(\"ZAR-1001\")\n  .commit(\"feat: ZAR-1001 new feature\")\n  .commit(\"fix: ZAR-1001 fix\")\n  .commit(\"feat: ZAR-1001 texts\");\n\nconst task2 = newEpic\n  .branch(\"ZAR-1002\")\n  .commit(\"feat: ZAR-1002 new feature\")\n  .commit(\"fix: ZAR-1002 fix\")\n  \nnewEpic.merge(task1, \"ZAR-1001\").merge(task2, \"ZAR-1002\");\n\nconst release = newEpic.branch(\"release\").merge(newEpic, \"Ready to test\");\nconst bug1 = release\n  .branch(\"ZAR-1003\")\n  .commit(\"fix: ZAR-1003 fix\")\nconst bug2 = release\n  .branch(\"ZAR-1004\")\n  .commit(\"fix: ZAR-1004 fix\")\n\nrelease.merge(bug1, \"ZAR-1003\").merge(bug2, \"ZAR-1004\");\nrelease.tag(\"v0.1.0\");\n\nrelease.merge(newEpic2).tag(\"v0.2.0\");\n\nmaster.merge(release, \"Release new version\").tag(\"v1.0.0\");\n\nconst productionBug = gitgraph.branch(\"ZAR-production-bug\").commit(\"fix(prod): ZAR-production-bug\");\nmaster.merge(productionBug, \"Bug fix\").tag(\"v1.0.1\");\n"]}